name: Upgrade Testing

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.svg'
      - '**.drawio'
      - '.spelling'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.svg'
      - '**.drawio'
      - '.spelling'

jobs:
  skip-check:
    runs-on: ubuntu-latest
    name: Skip the job?
    outputs:
          should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
    - id: skip_check
      uses: fkirc/skip-duplicate-actions@v3.4.1
      with:
        skip_after_successful_duplicate: 'true'
        do_not_skip: '["workflow_dispatch", "schedule"]'

  upgrade-testing:
    runs-on: ubuntu-20.04
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v2
        with:
          go-version: "1.17.6"

      - name: Build artifacts
        uses: goreleaser/goreleaser-action@v2
        with:
          version: v1.7.0
          args: release --rm-dist --skip-publish --skip-validate --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create edgeDNS k3s Cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "edgedns"
          args: -c k3d/edge-dns.yaml

      - name: Create 1st k3s Cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-gslb1"
          args: -c k3d/test-gslb1.yaml

      - name: Create 2nd k3s Cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-gslb2"
          args: -c k3d/test-gslb2.yaml

      - name: K8GB deploy stable version
        run: make deploy-stable-version list-running-pods

      - name: K8GB deploy test version
        run: make deploy-test-version list-running-pods

      - name: Run Terratest
        run: |
          mkdir -p ${{ github.workspace }}/tmp/terratest
          set -o pipefail
          make terratest | tee ${{ github.workspace }}/tmp/terratest/all.log
          echo "::endgroup::"

      - name: Terratest log parser
        if: always()
        run: |
          curl --location --silent --fail --show-error -o terratest_log_parser https://github.com/gruntwork-io/terratest/releases/download/v0.38.8/terratest_log_parser_linux_amd64
          chmod +x terratest_log_parser
          echo "::group::Parsing the logs"
          ./terratest_log_parser --testlog ${{ github.workspace }}/tmp/terratest/all.log --outputdir ${{ github.workspace }}/tmp/terratest
          echo "::endgroup::"

          echo -e "\nSummary:\n--------"
          export TERM=xterm
          cat ${{ github.workspace }}/tmp/terratest/summary.log | sed -e "s;FAIL;$(tput setaf 1)&$(tput sgr0);" -e "s;PASS;$(tput setaf 2)&$(tput sgr0);"

          echo -e "\n\nTerratest logs:"
          for log in $(find ${{ github.workspace }}/tmp/terratest -regex ".*/Test.*\.log"); do
              echo "::group::$(basename $log)"
              cat $log
              echo "::endgroup::"
          done
          echo Separated log files will be available under artifact section at https://github.com/k8gb-io/k8gb/actions/runs/${{ github.run_id }}

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: terratest-logs
          path: ${{ github.workspace }}/tmp/terratest
