/*
Copyright 2021 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/
package metrics

import (
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"sync"

	k8gbv1beta1 "github.com/AbsaOSS/k8gb/api/v1beta1"
	"github.com/AbsaOSS/k8gb/controllers/depresolver"
	"github.com/AbsaOSS/k8gb/controllers/internal/utils"
	"github.com/prometheus/client_golang/prometheus"
	crm "sigs.k8s.io/controller-runtime/pkg/metrics"
)

const (
	k8gb          = "k8gb"
	gslbSubsystem = "gslb"
	primary       = "primary"
	secondary     = "secondary"
)

type collectors struct {
	HealthyRecords        *prometheus.GaugeVec
	StatusPerIngressHosts *prometheus.GaugeVec
	StatusFailover        *prometheus.GaugeVec
	StatusRoundRobin      *prometheus.GaugeVec
	StatusGeoIP           *prometheus.GaugeVec
	ZoneUpdateTotal       *prometheus.CounterVec
	ErrorTotal            *prometheus.CounterVec
	ReconciliationTotal   prometheus.Counter
}

type PrometheusMetrics struct {
	once    sync.Once
	config  depresolver.Config
	metrics collectors
}

var regex = regexp.MustCompile("[A-Z]")

// newPrometheusMetrics creates new prometheus metrics instance
func newPrometheusMetrics(config depresolver.Config) (metrics *PrometheusMetrics) {
	metrics = new(PrometheusMetrics)
	metrics.config = config
	metrics.init()
	return
}

func (m *PrometheusMetrics) UpdateIngressHostsPerStatusMetric(gslb *k8gbv1beta1.Gslb, serviceHealth map[string]k8gbv1beta1.HealthStatus) {
	var healthyHostsCount, unhealthyHostsCount, notFoundHostsCount int
	for _, hs := range serviceHealth {
		switch hs {
		case k8gbv1beta1.Healthy:
			healthyHostsCount++
		case k8gbv1beta1.Unhealthy:
			unhealthyHostsCount++
		default:
			notFoundHostsCount++
		}
	}
	m.metrics.StatusPerIngressHosts.With(prometheus.Labels{"namespace": gslb.Namespace, "name": gslb.Name, "status": k8gbv1beta1.Healthy.String()}).
		Set(float64(healthyHostsCount))
	m.metrics.StatusPerIngressHosts.With(prometheus.Labels{"namespace": gslb.Namespace, "name": gslb.Name, "status": k8gbv1beta1.Unhealthy.String()}).
		Set(float64(unhealthyHostsCount))
	m.metrics.StatusPerIngressHosts.With(prometheus.Labels{"namespace": gslb.Namespace, "name": gslb.Name, "status": k8gbv1beta1.NotFound.String()}).
		Set(float64(notFoundHostsCount))
}

func (m *PrometheusMetrics) UpdateHealthyRecordsMetric(gslb *k8gbv1beta1.Gslb, healthyRecords map[string][]string) {
	var hrsCount int
	for _, hrs := range healthyRecords {
		hrsCount += len(hrs)
	}
	m.metrics.HealthyRecords.With(prometheus.Labels{"namespace": gslb.Namespace, "name": gslb.Name}).Set(float64(hrsCount))
}

func (m *PrometheusMetrics) UpdateFailoverStatus(gslb *k8gbv1beta1.Gslb, isPrimary bool, healthy k8gbv1beta1.HealthStatus, targets []string) {
	t := secondary
	if isPrimary {
		t = primary
	}
	m.updateRuntimeStatus(gslb, m.metrics.StatusFailover, healthy, targets, "_"+t)
}

func (m *PrometheusMetrics) UpdateRoundrobinStatus(gslb *k8gbv1beta1.Gslb, healthy k8gbv1beta1.HealthStatus, targets []string) {
	m.updateRuntimeStatus(gslb, m.metrics.StatusRoundRobin, healthy, targets, "")
}

func (m *PrometheusMetrics) UpdateGeoIPStatus(gslb *k8gbv1beta1.Gslb, healthy k8gbv1beta1.HealthStatus, targets []string) {
	m.updateRuntimeStatus(gslb, m.metrics.StatusGeoIP, healthy, targets, "")
}

func (m *PrometheusMetrics) ZoneUpdateIncrement(gslb *k8gbv1beta1.Gslb) {
	m.metrics.ZoneUpdateTotal.With(prometheus.Labels{"namespace": gslb.Namespace, "name": gslb.Name}).Inc()
}

func (m *PrometheusMetrics) ErrorIncrement(gslb *k8gbv1beta1.Gslb) {
	m.metrics.ErrorTotal.With(prometheus.Labels{"namespace": gslb.Namespace, "name": gslb.Name}).Inc()
}

func (m *PrometheusMetrics) ReconciliationIncrement() {
	m.metrics.ReconciliationTotal.Inc()
}

// Register prometheus metrics. Read register documentation, but shortly:
// You can register metric with given name only once
func (m *PrometheusMetrics) Register() (err error) {
	m.once.Do(func() {
		for _, r := range m.registry() {
			if err = crm.Registry.Register(r); err != nil {
				return
			}
		}
	})
	if err != nil {
		return fmt.Errorf("can't register prometheus metrics: %s", err)
	}
	return
}

// Unregister prometheus metrics
func (m *PrometheusMetrics) Unregister() {
	for _, r := range m.registry() {
		crm.Registry.Unregister(r)
	}
}

// init instantiates particular metrics
func (m *PrometheusMetrics) init() {
	m.metrics.HealthyRecords = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Namespace: m.config.K8gbNamespace,
			Subsystem: gslbSubsystem,
			Name:      "healthy_records",
			Help:      "Number of healthy records observed by K8GB.",
		},
		[]string{"namespace", "name"},
	)

	m.metrics.StatusPerIngressHosts = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Namespace: m.config.K8gbNamespace,
			Subsystem: gslbSubsystem,
			Name:      "status_per_ingress_hosts",
			Help:      "Number of managed hosts observed by K8GB.",
		},
		[]string{"namespace", "name", "status"},
	)

	m.metrics.ZoneUpdateTotal = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Namespace: m.config.K8gbNamespace,
			Subsystem: gslbSubsystem,
			Name:      "zone_update_total",
			Help:      "Number of delegated zone updates",
		},
		[]string{"namespace", "name"},
	)

	m.metrics.ErrorTotal = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Namespace: m.config.K8gbNamespace,
			Subsystem: gslbSubsystem,
			Name:      "error_total",
			Help:      "Number of errors",
		},
		[]string{"namespace", "name"},
	)

	m.metrics.ReconciliationTotal = prometheus.NewCounter(
		prometheus.CounterOpts{
			Namespace: m.config.K8gbNamespace,
			Subsystem: gslbSubsystem,
			Name:      "reconciliation_total",
			Help:      "Number of successful reconciliation loops.",
		})

	m.metrics.StatusFailover = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Namespace: m.config.K8gbNamespace,
			Subsystem: gslbSubsystem,
			Name:      "status_failover",
			Help:      "K8GB Failover status.",
		},
		[]string{"namespace", "name", "status"},
	)
	m.metrics.StatusRoundRobin = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Namespace: m.config.K8gbNamespace,
			Subsystem: gslbSubsystem,
			Name:      "status_roundrobin",
			Help:      "K8GB RoundRobin status.",
		},
		[]string{"namespace", "name", "status"},
	)
	m.metrics.StatusGeoIP = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Namespace: m.config.K8gbNamespace,
			Subsystem: gslbSubsystem,
			Name:      "status_geoip",
			Help:      "K8GB GeoIP status.",
		},
		[]string{"namespace", "name", "status"},
	)
}

// registry is helper function reading fields from m.metrics structure and builds metrics map
// The key is metric name while value is metric instance
func (m *PrometheusMetrics) registry() (r map[string]prometheus.Collector) {
	r = make(map[string]prometheus.Collector)
	val := reflect.Indirect(reflect.ValueOf(m.metrics))
	for i := 0; i < val.Type().NumField(); i++ {
		n := val.Type().Field(i).Name
		if !val.Field(i).IsNil() {
			var v = val.FieldByName(n).Interface().(prometheus.Collector)
			name := fmt.Sprintf("%s_%s_%s", k8gb, gslbSubsystem,
				strings.ToLower(strings.Join(utils.SplitAfter(n, regex), "_")))
			r[name] = v
		}
	}
	return
}

func (m *PrometheusMetrics) updateRuntimeStatus(
	gslb *k8gbv1beta1.Gslb,
	vec *prometheus.GaugeVec,
	healthStatus k8gbv1beta1.HealthStatus,
	targets []string,
	tag string) {
	var h, u, n int
	switch healthStatus {
	case k8gbv1beta1.Healthy:
		h = len(targets)
	case k8gbv1beta1.Unhealthy:
		u = len(targets)
	case k8gbv1beta1.NotFound:
		n = len(targets)
	}
	vec.With(prometheus.Labels{"namespace": gslb.Namespace, "name": gslb.Name, "status": fmt.Sprintf("%s%s", k8gbv1beta1.Healthy, tag)}).
		Set(float64(h))
	vec.With(prometheus.Labels{"namespace": gslb.Namespace, "name": gslb.Name, "status": fmt.Sprintf("%s%s", k8gbv1beta1.Unhealthy, tag)}).
		Set(float64(u))
	vec.With(prometheus.Labels{"namespace": gslb.Namespace, "name": gslb.Name, "status": fmt.Sprintf("%s%s", k8gbv1beta1.NotFound, tag)}).
		Set(float64(n))
}
