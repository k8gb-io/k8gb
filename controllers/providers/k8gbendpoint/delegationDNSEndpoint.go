package k8gbendpoint

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"context"

	"github.com/k8gb-io/k8gb/controllers/depresolver"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"
	externaldns "sigs.k8s.io/external-dns/endpoint"
)

type DelegationDNSEndpoint struct {
	context      context.Context
	endpointType dnsEndpointType
	client       client.Client
	config       depresolver.Config
	logger       *zerolog.Logger
	info         depresolver.DelegationZoneInfo
}

func NewDelegationDNSEndpoint(
	context context.Context,
	client client.Client,
	config depresolver.Config,
	logger *zerolog.Logger,
	info depresolver.DelegationZoneInfo) *DelegationDNSEndpoint {
	return &DelegationDNSEndpoint{
		context:      context,
		client:       client,
		config:       config,
		logger:       logger,
		endpointType: delegationDNSEndpoint,
		info:         info,
	}
}

func (d *DelegationDNSEndpoint) SaveDNSEndpoint(e *externaldns.DNSEndpoint) error {
	return saveDNSEndpoint(d.context, d.client, d.config.K8gbNamespace, e, d.logger)
}

func (d *DelegationDNSEndpoint) RemoveEndpoint() error {
	return removeEndpoint(d.context, d.client, client.ObjectKey{Namespace: d.config.K8gbNamespace, Name: d.info.GetExternalDNSEndpointName()}, d.logger)
}

func (d *DelegationDNSEndpoint) GetDNSEndpoint() (*externaldns.DNSEndpoint, error) {
	const externalDNSTypeCommon = "extdns"
	ttl := externaldns.TTL(d.config.NSRecordTTL)
	log.Info().
		Interface("provider", d.endpointType).
		Msg("Creating/Updating DNSEndpoint CR")

	NSRecord := &externaldns.DNSEndpoint{
		ObjectMeta: metav1.ObjectMeta{
			Name:      d.info.GetExternalDNSEndpointName(),
			Namespace: d.config.K8gbNamespace,
			Labels:    map[string]string{"k8gb.absa.oss/dnstype": externalDNSTypeCommon},
		},
		Spec: externaldns.DNSEndpointSpec{
			Endpoints: []*externaldns.Endpoint{
				{
					DNSName:    d.info.Domain,
					RecordTTL:  ttl,
					RecordType: "NS",
					Targets:    d.info.GetNSServerList(),
				},
				{
					DNSName:    d.info.ClusterNSName,
					RecordTTL:  ttl,
					RecordType: "A",
					Targets:    d.info.IPs,
				},
			},
		},
	}
	return NSRecord, nil
}
