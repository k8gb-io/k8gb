package resolver

/*
Copyright 2021-2025 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"github.com/go-playground/validator/v10"
	k8gbv1beta1 "github.com/k8gb-io/k8gb/api/v1beta1"
)

func ValidateStrategy(sl validator.StructLevel) {
	strategy := sl.Current().Interface().(k8gbv1beta1.Strategy)

	// If Weight is not empty, Type must be roundRobin
	if len(strategy.Weight) != 0 && strategy.Type != RoundRobinStrategy {
		sl.ReportError(strategy.Type, "Type", "Type", "weightRequiresRoundRobin", "")
		return
	}

	// Validate all keys and values in Weight, if weights are defined
	for k, v := range strategy.Weight {
		// Key must match geoTagRegex and not be empty
		if k == "" || !geoTagRegex.MatchString(k) {
			sl.ReportError(k, "Weight", "Weight", "invalidGeoTagKey", "")
		}
		// Value must be >= 0 and <= 1000
		if v < 0 || v > 1000 {
			sl.ReportError(v, "Weight", "Weight", "weightOutOfRange", "")
		}
	}
}
