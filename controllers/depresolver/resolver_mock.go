// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/depresolver/resolver.go

// Package depresolver is a generated GoMock package.
package depresolver

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/k8gb-io/k8gb/api/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockResolver is a mock of GslbResolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// ResolveGslbSpec mocks base method.
func (m *MockResolver) ResolveGslbSpec(ctx context.Context, gslb *v1beta1.Gslb, client client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveGslbSpec", ctx, gslb, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveGslbSpec indicates an expected call of ResolveGslbSpec.
func (mr *MockResolverMockRecorder) ResolveGslbSpec(ctx, gslb, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveGslbSpec", reflect.TypeOf((*MockResolver)(nil).ResolveGslbSpec), ctx, gslb, client)
}

// ResolveOperatorConfig mocks base method.
func (m *MockResolver) ResolveOperatorConfig() (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveOperatorConfig")
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveOperatorConfig indicates an expected call of ResolveOperatorConfig.
func (mr *MockResolverMockRecorder) ResolveOperatorConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveOperatorConfig", reflect.TypeOf((*MockResolver)(nil).ResolveOperatorConfig))
}
