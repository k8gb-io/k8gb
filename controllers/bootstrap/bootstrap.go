package bootstrap

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"context"
	"fmt"

	"github.com/k8gb-io/k8gb/controllers/depresolver"
	"github.com/k8gb-io/k8gb/controllers/providers/assistant"
	corev1 "k8s.io/api/core/v1"
	netv1 "k8s.io/api/networking/v1"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type Bootstrap struct {
	CoreDNSService client.ObjectKey
	Ingress        client.ObjectKey
	IPs            []string
}

func GetBootstrap(ctx context.Context, config *depresolver.Config, kubeconfig *rest.Config) (*Bootstrap, error) {
	cl, err := client.New(kubeconfig, client.Options{})
	if err != nil {
		return nil, err
	}
	return GetBootstrapWithClient(ctx, config, cl)
}

func GetBootstrapWithClient(ctx context.Context, config *depresolver.Config, cl client.Client) (*Bootstrap, error) {
	bootstrap, err := readIPs(ctx, cl, config)
	if err != nil {
		return nil, err
	}
	if len(bootstrap.IPs) == 0 {
		return nil, fmt.Errorf("no IP addresses found")
	}
	return bootstrap, nil
}

func readIPs(ctx context.Context, cl client.Client, config *depresolver.Config) (*Bootstrap, error) {
	const coreDNSIngressRefAnnotation = "k8gb.io/coredns-ingress-ref"
	var err error
	var coreDNSService *corev1.Service
	var ingress *netv1.Ingress
	coreDNSAssistant := assistant.NewCoreDNSServiceAssistant(cl, *config)
	coreDNSService, err = coreDNSAssistant.GetResource()
	if err != nil {
		return nil, err
	}
	boot := &Bootstrap{CoreDNSService: client.ObjectKey{Name: coreDNSService.Name, Namespace: coreDNSService.Namespace}}
	if coreDNSService.Spec.Type != corev1.ServiceTypeLoadBalancer {
		ingressPath, found := coreDNSService.Annotations[coreDNSIngressRefAnnotation]
		if !found {
			return nil, fmt.Errorf("CoreDNS service does not have %s annotation", coreDNSIngressRefAnnotation)
		}
		ingressAssistant := assistant.NewIngressAssistant(ctx, cl, ingressPath)
		ingress, err = ingressAssistant.GetResource()
		if err != nil {
			return nil, err
		}
		boot.Ingress = client.ObjectKey{Name: ingress.Name, Namespace: ingress.Namespace}
		boot.IPs, err = ingressAssistant.GetExposedIPs()
		return boot, err
	}
	// coreDNSService is ServiceTypeLoadBalancer
	boot.IPs, err = coreDNSAssistant.GetExposedIPs()
	return boot, err
}

func (b *Bootstrap) HasIngress() bool {
	return b.Ingress.Name != ""
}

func (b *Bootstrap) ContainsIngress(ing *netv1.Ingress) bool {
	if ing == nil {
		return false
	}
	return b.Ingress.Name == ing.Name && b.Ingress.Namespace == ing.Namespace
}

func (b *Bootstrap) ContainsService(svc *corev1.Service) bool {
	if svc == nil {
		return false
	}
	return b.CoreDNSService.Name == svc.Name && b.CoreDNSService.Namespace == svc.Namespace
}

func (b *Bootstrap) String() string {
	if b.HasIngress() {
		return fmt.Sprintf("Ingress %s/%s %s", b.Ingress.Namespace, b.Ingress.Name, b.IPs)
	}
	return fmt.Sprintf("Service %s/%s %s", b.CoreDNSService.Namespace, b.CoreDNSService.Name, b.IPs)
}
