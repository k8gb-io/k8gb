// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/utils/dns_query_service.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=controllers/mocks/dns_query_service_mock.go -source=controllers/utils/dns_query_service.go DNSQueryService
//

// Package mocks is a generated GoMock package.
package mocks

/*
Copyright 2021-2025 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	reflect "reflect"

	utils "github.com/k8gb-io/k8gb/controllers/utils"
	dns "github.com/miekg/dns"
	gomock "go.uber.org/mock/gomock"
)

// MockDNSQueryService is a mock of DNSQueryService interface.
type MockDNSQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockDNSQueryServiceMockRecorder
}

// MockDNSQueryServiceMockRecorder is the mock recorder for MockDNSQueryService.
type MockDNSQueryServiceMockRecorder struct {
	mock *MockDNSQueryService
}

// NewMockDNSQueryService creates a new mock instance.
func NewMockDNSQueryService(ctrl *gomock.Controller) *MockDNSQueryService {
	mock := &MockDNSQueryService{ctrl: ctrl}
	mock.recorder = &MockDNSQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSQueryService) EXPECT() *MockDNSQueryServiceMockRecorder {
	return m.recorder
}

// ExtractARecords mocks base method.
func (m *MockDNSQueryService) ExtractARecords(msg *dns.Msg) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractARecords", msg)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ExtractARecords indicates an expected call of ExtractARecords.
func (mr *MockDNSQueryServiceMockRecorder) ExtractARecords(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractARecords", reflect.TypeOf((*MockDNSQueryService)(nil).ExtractARecords), msg)
}

// Query mocks base method.
func (m *MockDNSQueryService) Query(host string, nameservers utils.DNSList) (*dns.Msg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", host, nameservers)
	ret0, _ := ret[0].(*dns.Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDNSQueryServiceMockRecorder) Query(host, nameservers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDNSQueryService)(nil).Query), host, nameservers)
}
