// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/providers/assistant/assistant.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=controllers/mocks/assistant_mock.go -source=controllers/providers/assistant/assistant.go Assistant
//

// Package mocks is a generated GoMock package.
package mocks

/*
Copyright 2021-2025 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockLoadBalancerStatusAssistant is a mock of LoadBalancerStatusAssistant interface.
type MockLoadBalancerStatusAssistant[T client.Object] struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerStatusAssistantMockRecorder[T]
}

// MockLoadBalancerStatusAssistantMockRecorder is the mock recorder for MockLoadBalancerStatusAssistant.
type MockLoadBalancerStatusAssistantMockRecorder[T client.Object] struct {
	mock *MockLoadBalancerStatusAssistant[T]
}

// NewMockLoadBalancerStatusAssistant creates a new mock instance.
func NewMockLoadBalancerStatusAssistant[T client.Object](ctrl *gomock.Controller) *MockLoadBalancerStatusAssistant[T] {
	mock := &MockLoadBalancerStatusAssistant[T]{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerStatusAssistantMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancerStatusAssistant[T]) EXPECT() *MockLoadBalancerStatusAssistantMockRecorder[T] {
	return m.recorder
}

// GetExposedIPs mocks base method.
func (m *MockLoadBalancerStatusAssistant[T]) GetExposedIPs() ([]string, *T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExposedIPs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*T)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExposedIPs indicates an expected call of GetExposedIPs.
func (mr *MockLoadBalancerStatusAssistantMockRecorder[T]) GetExposedIPs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExposedIPs", reflect.TypeOf((*MockLoadBalancerStatusAssistant[T])(nil).GetExposedIPs))
}

// GetResource mocks base method.
func (m *MockLoadBalancerStatusAssistant[T]) GetResource() (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource")
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockLoadBalancerStatusAssistantMockRecorder[T]) GetResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockLoadBalancerStatusAssistant[T])(nil).GetResource))
}
