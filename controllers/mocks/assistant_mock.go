// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/providers/assistant/assistant.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=controllers/mocks/assistant_mock.go -source=controllers/providers/assistant/assistant.go Assistant
//

// Package mocks is a generated GoMock package.
package mocks

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockAssistant is a mock of Assistant interface.
type MockAssistant[T client.Object] struct {
	ctrl     *gomock.Controller
	recorder *MockAssistantMockRecorder[T]
}

// MockAssistantMockRecorder is the mock recorder for MockAssistant.
type MockAssistantMockRecorder[T client.Object] struct {
	mock *MockAssistant[T]
}

// NewMockAssistant creates a new mock instance.
func NewMockAssistant[T client.Object](ctrl *gomock.Controller) *MockAssistant[T] {
	mock := &MockAssistant[T]{ctrl: ctrl}
	mock.recorder = &MockAssistantMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssistant[T]) EXPECT() *MockAssistantMockRecorder[T] {
	return m.recorder
}

// GetExposedIPs mocks base method.
func (m *MockAssistant[T]) GetExposedIPs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExposedIPs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExposedIPs indicates an expected call of GetExposedIPs.
func (mr *MockAssistantMockRecorder[T]) GetExposedIPs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExposedIPs", reflect.TypeOf((*MockAssistant[T])(nil).GetExposedIPs))
}

// GetResource mocks base method.
func (m *MockAssistant[T]) GetResource() (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource")
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockAssistantMockRecorder[T]) GetResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockAssistant[T])(nil).GetResource))
}
