// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/infobloxopen/infoblox-go-client/v2 (interfaces: IBObjectManager)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=controllers/mocks/infoblox-object-manager_mock.go github.com/infobloxopen/infoblox-go-client/v2 IBObjectManager
//

// Package mocks is a generated GoMock package.
package mocks

/*
Copyright 2021-2025 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	reflect "reflect"

	ibclient "github.com/infobloxopen/infoblox-go-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockIBObjectManager is a mock of IBObjectManager interface.
type MockIBObjectManager struct {
	ctrl     *gomock.Controller
	recorder *MockIBObjectManagerMockRecorder
}

// MockIBObjectManagerMockRecorder is the mock recorder for MockIBObjectManager.
type MockIBObjectManagerMockRecorder struct {
	mock *MockIBObjectManager
}

// NewMockIBObjectManager creates a new mock instance.
func NewMockIBObjectManager(ctrl *gomock.Controller) *MockIBObjectManager {
	mock := &MockIBObjectManager{ctrl: ctrl}
	mock.recorder = &MockIBObjectManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBObjectManager) EXPECT() *MockIBObjectManagerMockRecorder {
	return m.recorder
}

// AllocateIP mocks base method.
func (m *MockIBObjectManager) AllocateIP(arg0, arg1, arg2 string, arg3 bool, arg4, arg5, arg6 string, arg7 ibclient.EA, arg8, arg9, arg10 string, arg11 *bool, arg12 string, arg13 bool, arg14 []*ibclient.Dhcpoption, arg15 bool) (*ibclient.FixedAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateIP", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
	ret0, _ := ret[0].(*ibclient.FixedAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateIP indicates an expected call of AllocateIP.
func (mr *MockIBObjectManagerMockRecorder) AllocateIP(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateIP", reflect.TypeOf((*MockIBObjectManager)(nil).AllocateIP), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
}

// AllocateNetwork mocks base method.
func (m *MockIBObjectManager) AllocateNetwork(arg0, arg1 string, arg2 bool, arg3 uint, arg4 string, arg5 ibclient.EA) (*ibclient.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateNetwork", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*ibclient.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateNetwork indicates an expected call of AllocateNetwork.
func (mr *MockIBObjectManagerMockRecorder) AllocateNetwork(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateNetwork", reflect.TypeOf((*MockIBObjectManager)(nil).AllocateNetwork), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AllocateNetworkByEA mocks base method.
func (m *MockIBObjectManager) AllocateNetworkByEA(arg0 string, arg1 bool, arg2 string, arg3 ibclient.EA, arg4 map[string]string, arg5 uint, arg6 string) (*ibclient.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateNetworkByEA", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*ibclient.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateNetworkByEA indicates an expected call of AllocateNetworkByEA.
func (mr *MockIBObjectManagerMockRecorder) AllocateNetworkByEA(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateNetworkByEA", reflect.TypeOf((*MockIBObjectManager)(nil).AllocateNetworkByEA), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// AllocateNetworkContainer mocks base method.
func (m *MockIBObjectManager) AllocateNetworkContainer(arg0, arg1 string, arg2 bool, arg3 uint, arg4 string, arg5 ibclient.EA) (*ibclient.NetworkContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateNetworkContainer", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*ibclient.NetworkContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateNetworkContainer indicates an expected call of AllocateNetworkContainer.
func (mr *MockIBObjectManagerMockRecorder) AllocateNetworkContainer(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateNetworkContainer", reflect.TypeOf((*MockIBObjectManager)(nil).AllocateNetworkContainer), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AllocateNetworkContainerByEA mocks base method.
func (m *MockIBObjectManager) AllocateNetworkContainerByEA(arg0 string, arg1 bool, arg2 string, arg3 ibclient.EA, arg4 map[string]string, arg5 uint) (*ibclient.NetworkContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateNetworkContainerByEA", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*ibclient.NetworkContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateNetworkContainerByEA indicates an expected call of AllocateNetworkContainerByEA.
func (mr *MockIBObjectManagerMockRecorder) AllocateNetworkContainerByEA(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateNetworkContainerByEA", reflect.TypeOf((*MockIBObjectManager)(nil).AllocateNetworkContainerByEA), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AllocateNextAvailableIp mocks base method.
func (m *MockIBObjectManager) AllocateNextAvailableIp(arg0, arg1 string, arg2 map[string]string, arg3 map[string][]string, arg4 bool, arg5 ibclient.EA, arg6 string, arg7 bool, arg8 *int, arg9 string, arg10, arg11 bool, arg12, arg13, arg14, arg15 string, arg16 bool, arg17 uint32, arg18 []string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateNextAvailableIp", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateNextAvailableIp indicates an expected call of AllocateNextAvailableIp.
func (mr *MockIBObjectManagerMockRecorder) AllocateNextAvailableIp(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateNextAvailableIp", reflect.TypeOf((*MockIBObjectManager)(nil).AllocateNextAvailableIp), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
}

// CreateAAAARecord mocks base method.
func (m *MockIBObjectManager) CreateAAAARecord(arg0, arg1, arg2, arg3, arg4 string, arg5 bool, arg6 uint32, arg7 string, arg8 ibclient.EA) (*ibclient.RecordAAAA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAAAARecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*ibclient.RecordAAAA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAAAARecord indicates an expected call of CreateAAAARecord.
func (mr *MockIBObjectManagerMockRecorder) CreateAAAARecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAAAARecord", reflect.TypeOf((*MockIBObjectManager)(nil).CreateAAAARecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// CreateARecord mocks base method.
func (m *MockIBObjectManager) CreateARecord(arg0, arg1, arg2, arg3, arg4 string, arg5 uint32, arg6 bool, arg7 string, arg8 ibclient.EA) (*ibclient.RecordA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateARecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*ibclient.RecordA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateARecord indicates an expected call of CreateARecord.
func (mr *MockIBObjectManagerMockRecorder) CreateARecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateARecord", reflect.TypeOf((*MockIBObjectManager)(nil).CreateARecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// CreateAliasRecord mocks base method.
func (m *MockIBObjectManager) CreateAliasRecord(arg0, arg1, arg2, arg3, arg4 string, arg5 bool, arg6 ibclient.EA, arg7 uint32, arg8 bool) (*ibclient.RecordAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAliasRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*ibclient.RecordAlias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAliasRecord indicates an expected call of CreateAliasRecord.
func (mr *MockIBObjectManagerMockRecorder) CreateAliasRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAliasRecord", reflect.TypeOf((*MockIBObjectManager)(nil).CreateAliasRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// CreateCNAMERecord mocks base method.
func (m *MockIBObjectManager) CreateCNAMERecord(arg0, arg1, arg2 string, arg3 bool, arg4 uint32, arg5 string, arg6 ibclient.EA) (*ibclient.RecordCNAME, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCNAMERecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*ibclient.RecordCNAME)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCNAMERecord indicates an expected call of CreateCNAMERecord.
func (mr *MockIBObjectManagerMockRecorder) CreateCNAMERecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCNAMERecord", reflect.TypeOf((*MockIBObjectManager)(nil).CreateCNAMERecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// CreateDefaultNetviews mocks base method.
func (m *MockIBObjectManager) CreateDefaultNetviews(arg0, arg1 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefaultNetviews", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDefaultNetviews indicates an expected call of CreateDefaultNetviews.
func (mr *MockIBObjectManagerMockRecorder) CreateDefaultNetviews(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultNetviews", reflect.TypeOf((*MockIBObjectManager)(nil).CreateDefaultNetviews), arg0, arg1)
}

// CreateDtcLbdn mocks base method.
func (m *MockIBObjectManager) CreateDtcLbdn(arg0 string, arg1 []ibclient.AuthZonesLink, arg2 string, arg3, arg4 bool, arg5 ibclient.EA, arg6 string, arg7 []string, arg8 uint32, arg9 []*ibclient.DtcPoolLink, arg10 uint32, arg11 *string, arg12 []string, arg13 uint32, arg14 bool) (*ibclient.DtcLbdn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDtcLbdn", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
	ret0, _ := ret[0].(*ibclient.DtcLbdn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDtcLbdn indicates an expected call of CreateDtcLbdn.
func (mr *MockIBObjectManagerMockRecorder) CreateDtcLbdn(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDtcLbdn", reflect.TypeOf((*MockIBObjectManager)(nil).CreateDtcLbdn), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
}

// CreateDtcPool mocks base method.
func (m *MockIBObjectManager) CreateDtcPool(arg0, arg1, arg2 string, arg3 map[string]any, arg4 []*ibclient.DtcServerLink, arg5 []ibclient.Monitor, arg6 *string, arg7 string, arg8 *string, arg9 map[string]any, arg10 ibclient.EA, arg11 bool, arg12 []map[string]any, arg13 string, arg14 uint32, arg15, arg16 bool, arg17 uint32) (*ibclient.DtcPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDtcPool", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
	ret0, _ := ret[0].(*ibclient.DtcPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDtcPool indicates an expected call of CreateDtcPool.
func (mr *MockIBObjectManagerMockRecorder) CreateDtcPool(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDtcPool", reflect.TypeOf((*MockIBObjectManager)(nil).CreateDtcPool), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
}

// CreateDtcServer mocks base method.
func (m *MockIBObjectManager) CreateDtcServer(arg0, arg1, arg2 string, arg3, arg4 bool, arg5 ibclient.EA, arg6 []map[string]any, arg7 string, arg8 bool) (*ibclient.DtcServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDtcServer", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*ibclient.DtcServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDtcServer indicates an expected call of CreateDtcServer.
func (mr *MockIBObjectManagerMockRecorder) CreateDtcServer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDtcServer", reflect.TypeOf((*MockIBObjectManager)(nil).CreateDtcServer), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// CreateEADefinition mocks base method.
func (m *MockIBObjectManager) CreateEADefinition(arg0 ibclient.EADefinition) (*ibclient.EADefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEADefinition", arg0)
	ret0, _ := ret[0].(*ibclient.EADefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEADefinition indicates an expected call of CreateEADefinition.
func (mr *MockIBObjectManagerMockRecorder) CreateEADefinition(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEADefinition", reflect.TypeOf((*MockIBObjectManager)(nil).CreateEADefinition), arg0)
}

// CreateHostRecord mocks base method.
func (m *MockIBObjectManager) CreateHostRecord(arg0, arg1 bool, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 string, arg11 bool, arg12 uint32, arg13 string, arg14 ibclient.EA, arg15 []string, arg16 bool) (*ibclient.HostRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)
	ret0, _ := ret[0].(*ibclient.HostRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHostRecord indicates an expected call of CreateHostRecord.
func (mr *MockIBObjectManagerMockRecorder) CreateHostRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostRecord", reflect.TypeOf((*MockIBObjectManager)(nil).CreateHostRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)
}

// CreateIpv4SharedNetwork mocks base method.
func (m *MockIBObjectManager) CreateIpv4SharedNetwork(arg0 string, arg1 []string, arg2 string, arg3 ibclient.EA, arg4 string, arg5, arg6 bool, arg7 []*ibclient.Dhcpoption) (*ibclient.SharedNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIpv4SharedNetwork", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(*ibclient.SharedNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIpv4SharedNetwork indicates an expected call of CreateIpv4SharedNetwork.
func (mr *MockIBObjectManagerMockRecorder) CreateIpv4SharedNetwork(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIpv4SharedNetwork", reflect.TypeOf((*MockIBObjectManager)(nil).CreateIpv4SharedNetwork), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// CreateMXRecord mocks base method.
func (m *MockIBObjectManager) CreateMXRecord(arg0, arg1, arg2 string, arg3, arg4 uint32, arg5 bool, arg6 string, arg7 ibclient.EA) (*ibclient.RecordMX, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMXRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(*ibclient.RecordMX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMXRecord indicates an expected call of CreateMXRecord.
func (mr *MockIBObjectManagerMockRecorder) CreateMXRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMXRecord", reflect.TypeOf((*MockIBObjectManager)(nil).CreateMXRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// CreateNSRecord mocks base method.
func (m *MockIBObjectManager) CreateNSRecord(arg0, arg1, arg2 string, arg3 []*ibclient.ZoneNameServer, arg4 string) (*ibclient.RecordNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNSRecord", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*ibclient.RecordNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNSRecord indicates an expected call of CreateNSRecord.
func (mr *MockIBObjectManagerMockRecorder) CreateNSRecord(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNSRecord", reflect.TypeOf((*MockIBObjectManager)(nil).CreateNSRecord), arg0, arg1, arg2, arg3, arg4)
}

// CreateNetwork mocks base method.
func (m *MockIBObjectManager) CreateNetwork(arg0, arg1 string, arg2 bool, arg3 string, arg4 ibclient.EA) (*ibclient.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*ibclient.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockIBObjectManagerMockRecorder) CreateNetwork(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockIBObjectManager)(nil).CreateNetwork), arg0, arg1, arg2, arg3, arg4)
}

// CreateNetworkContainer mocks base method.
func (m *MockIBObjectManager) CreateNetworkContainer(arg0, arg1 string, arg2 bool, arg3 string, arg4 ibclient.EA) (*ibclient.NetworkContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkContainer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*ibclient.NetworkContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkContainer indicates an expected call of CreateNetworkContainer.
func (mr *MockIBObjectManagerMockRecorder) CreateNetworkContainer(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkContainer", reflect.TypeOf((*MockIBObjectManager)(nil).CreateNetworkContainer), arg0, arg1, arg2, arg3, arg4)
}

// CreateNetworkRange mocks base method.
func (m *MockIBObjectManager) CreateNetworkRange(arg0, arg1, arg2, arg3, arg4, arg5 string, arg6 bool, arg7 ibclient.EA, arg8 *ibclient.Dhcpmember, arg9 string, arg10 []*ibclient.Dhcpoption, arg11 bool, arg12, arg13, arg14 string) (*ibclient.Range, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkRange", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
	ret0, _ := ret[0].(*ibclient.Range)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkRange indicates an expected call of CreateNetworkRange.
func (mr *MockIBObjectManagerMockRecorder) CreateNetworkRange(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkRange", reflect.TypeOf((*MockIBObjectManager)(nil).CreateNetworkRange), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
}

// CreateNetworkView mocks base method.
func (m *MockIBObjectManager) CreateNetworkView(arg0, arg1 string, arg2 ibclient.EA) (*ibclient.NetworkView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkView", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ibclient.NetworkView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkView indicates an expected call of CreateNetworkView.
func (mr *MockIBObjectManagerMockRecorder) CreateNetworkView(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkView", reflect.TypeOf((*MockIBObjectManager)(nil).CreateNetworkView), arg0, arg1, arg2)
}

// CreatePTRRecord mocks base method.
func (m *MockIBObjectManager) CreatePTRRecord(arg0, arg1, arg2, arg3, arg4, arg5 string, arg6 bool, arg7 uint32, arg8 string, arg9 ibclient.EA) (*ibclient.RecordPTR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePTRRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(*ibclient.RecordPTR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePTRRecord indicates an expected call of CreatePTRRecord.
func (mr *MockIBObjectManagerMockRecorder) CreatePTRRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePTRRecord", reflect.TypeOf((*MockIBObjectManager)(nil).CreatePTRRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// CreateRangeTemplate mocks base method.
func (m *MockIBObjectManager) CreateRangeTemplate(arg0 string, arg1, arg2 uint32, arg3 string, arg4 ibclient.EA, arg5 []*ibclient.Dhcpoption, arg6 bool, arg7, arg8 string, arg9 *ibclient.Dhcpmember, arg10 bool, arg11 string) (*ibclient.Rangetemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRangeTemplate", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
	ret0, _ := ret[0].(*ibclient.Rangetemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRangeTemplate indicates an expected call of CreateRangeTemplate.
func (mr *MockIBObjectManagerMockRecorder) CreateRangeTemplate(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRangeTemplate", reflect.TypeOf((*MockIBObjectManager)(nil).CreateRangeTemplate), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
}

// CreateSRVRecord mocks base method.
func (m *MockIBObjectManager) CreateSRVRecord(arg0, arg1 string, arg2, arg3, arg4 uint32, arg5 string, arg6 uint32, arg7 bool, arg8 string, arg9 ibclient.EA) (*ibclient.RecordSRV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSRVRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(*ibclient.RecordSRV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSRVRecord indicates an expected call of CreateSRVRecord.
func (mr *MockIBObjectManagerMockRecorder) CreateSRVRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSRVRecord", reflect.TypeOf((*MockIBObjectManager)(nil).CreateSRVRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// CreateTXTRecord mocks base method.
func (m *MockIBObjectManager) CreateTXTRecord(arg0, arg1, arg2 string, arg3 uint32, arg4 bool, arg5 string, arg6 ibclient.EA) (*ibclient.RecordTXT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTXTRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*ibclient.RecordTXT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTXTRecord indicates an expected call of CreateTXTRecord.
func (mr *MockIBObjectManagerMockRecorder) CreateTXTRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTXTRecord", reflect.TypeOf((*MockIBObjectManager)(nil).CreateTXTRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// CreateZoneAuth mocks base method.
func (m *MockIBObjectManager) CreateZoneAuth(arg0 string, arg1 ibclient.EA) (*ibclient.ZoneAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateZoneAuth", arg0, arg1)
	ret0, _ := ret[0].(*ibclient.ZoneAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateZoneAuth indicates an expected call of CreateZoneAuth.
func (mr *MockIBObjectManagerMockRecorder) CreateZoneAuth(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateZoneAuth", reflect.TypeOf((*MockIBObjectManager)(nil).CreateZoneAuth), arg0, arg1)
}

// CreateZoneDelegated mocks base method.
func (m *MockIBObjectManager) CreateZoneDelegated(arg0 string, arg1 ibclient.NullableNameServers, arg2 string, arg3, arg4 bool, arg5 string, arg6 uint32, arg7 bool, arg8 ibclient.EA, arg9, arg10 string) (*ibclient.ZoneDelegated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateZoneDelegated", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(*ibclient.ZoneDelegated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateZoneDelegated indicates an expected call of CreateZoneDelegated.
func (mr *MockIBObjectManagerMockRecorder) CreateZoneDelegated(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateZoneDelegated", reflect.TypeOf((*MockIBObjectManager)(nil).CreateZoneDelegated), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// CreateZoneForward mocks base method.
func (m *MockIBObjectManager) CreateZoneForward(arg0 string, arg1 bool, arg2 ibclient.EA, arg3 ibclient.NullableNameServers, arg4 bool, arg5 *ibclient.NullableForwardingServers, arg6, arg7, arg8, arg9, arg10 string) (*ibclient.ZoneForward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateZoneForward", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(*ibclient.ZoneForward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateZoneForward indicates an expected call of CreateZoneForward.
func (mr *MockIBObjectManagerMockRecorder) CreateZoneForward(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateZoneForward", reflect.TypeOf((*MockIBObjectManager)(nil).CreateZoneForward), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// DeleteAAAARecord mocks base method.
func (m *MockIBObjectManager) DeleteAAAARecord(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAAAARecord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAAAARecord indicates an expected call of DeleteAAAARecord.
func (mr *MockIBObjectManagerMockRecorder) DeleteAAAARecord(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAAAARecord", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteAAAARecord), arg0)
}

// DeleteARecord mocks base method.
func (m *MockIBObjectManager) DeleteARecord(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteARecord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteARecord indicates an expected call of DeleteARecord.
func (mr *MockIBObjectManagerMockRecorder) DeleteARecord(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteARecord", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteARecord), arg0)
}

// DeleteAliasRecord mocks base method.
func (m *MockIBObjectManager) DeleteAliasRecord(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAliasRecord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAliasRecord indicates an expected call of DeleteAliasRecord.
func (mr *MockIBObjectManagerMockRecorder) DeleteAliasRecord(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAliasRecord", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteAliasRecord), arg0)
}

// DeleteCNAMERecord mocks base method.
func (m *MockIBObjectManager) DeleteCNAMERecord(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCNAMERecord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCNAMERecord indicates an expected call of DeleteCNAMERecord.
func (mr *MockIBObjectManagerMockRecorder) DeleteCNAMERecord(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCNAMERecord", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteCNAMERecord), arg0)
}

// DeleteDtcLbdn mocks base method.
func (m *MockIBObjectManager) DeleteDtcLbdn(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDtcLbdn", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDtcLbdn indicates an expected call of DeleteDtcLbdn.
func (mr *MockIBObjectManagerMockRecorder) DeleteDtcLbdn(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDtcLbdn", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteDtcLbdn), arg0)
}

// DeleteDtcPool mocks base method.
func (m *MockIBObjectManager) DeleteDtcPool(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDtcPool", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDtcPool indicates an expected call of DeleteDtcPool.
func (mr *MockIBObjectManagerMockRecorder) DeleteDtcPool(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDtcPool", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteDtcPool), arg0)
}

// DeleteDtcServer mocks base method.
func (m *MockIBObjectManager) DeleteDtcServer(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDtcServer", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDtcServer indicates an expected call of DeleteDtcServer.
func (mr *MockIBObjectManagerMockRecorder) DeleteDtcServer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDtcServer", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteDtcServer), arg0)
}

// DeleteFixedAddress mocks base method.
func (m *MockIBObjectManager) DeleteFixedAddress(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFixedAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFixedAddress indicates an expected call of DeleteFixedAddress.
func (mr *MockIBObjectManagerMockRecorder) DeleteFixedAddress(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFixedAddress", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteFixedAddress), arg0)
}

// DeleteHostRecord mocks base method.
func (m *MockIBObjectManager) DeleteHostRecord(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostRecord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHostRecord indicates an expected call of DeleteHostRecord.
func (mr *MockIBObjectManagerMockRecorder) DeleteHostRecord(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostRecord", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteHostRecord), arg0)
}

// DeleteIpv4SharedNetwork mocks base method.
func (m *MockIBObjectManager) DeleteIpv4SharedNetwork(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIpv4SharedNetwork", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIpv4SharedNetwork indicates an expected call of DeleteIpv4SharedNetwork.
func (mr *MockIBObjectManagerMockRecorder) DeleteIpv4SharedNetwork(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIpv4SharedNetwork", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteIpv4SharedNetwork), arg0)
}

// DeleteMXRecord mocks base method.
func (m *MockIBObjectManager) DeleteMXRecord(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMXRecord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMXRecord indicates an expected call of DeleteMXRecord.
func (mr *MockIBObjectManagerMockRecorder) DeleteMXRecord(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMXRecord", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteMXRecord), arg0)
}

// DeleteNSRecord mocks base method.
func (m *MockIBObjectManager) DeleteNSRecord(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNSRecord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNSRecord indicates an expected call of DeleteNSRecord.
func (mr *MockIBObjectManagerMockRecorder) DeleteNSRecord(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNSRecord", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteNSRecord), arg0)
}

// DeleteNetwork mocks base method.
func (m *MockIBObjectManager) DeleteNetwork(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockIBObjectManagerMockRecorder) DeleteNetwork(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteNetwork), arg0)
}

// DeleteNetworkContainer mocks base method.
func (m *MockIBObjectManager) DeleteNetworkContainer(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkContainer", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetworkContainer indicates an expected call of DeleteNetworkContainer.
func (mr *MockIBObjectManagerMockRecorder) DeleteNetworkContainer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkContainer", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteNetworkContainer), arg0)
}

// DeleteNetworkRange mocks base method.
func (m *MockIBObjectManager) DeleteNetworkRange(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkRange", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetworkRange indicates an expected call of DeleteNetworkRange.
func (mr *MockIBObjectManagerMockRecorder) DeleteNetworkRange(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkRange", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteNetworkRange), arg0)
}

// DeleteNetworkView mocks base method.
func (m *MockIBObjectManager) DeleteNetworkView(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkView", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetworkView indicates an expected call of DeleteNetworkView.
func (mr *MockIBObjectManagerMockRecorder) DeleteNetworkView(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkView", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteNetworkView), arg0)
}

// DeletePTRRecord mocks base method.
func (m *MockIBObjectManager) DeletePTRRecord(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePTRRecord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePTRRecord indicates an expected call of DeletePTRRecord.
func (mr *MockIBObjectManagerMockRecorder) DeletePTRRecord(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePTRRecord", reflect.TypeOf((*MockIBObjectManager)(nil).DeletePTRRecord), arg0)
}

// DeleteRangeTemplate mocks base method.
func (m *MockIBObjectManager) DeleteRangeTemplate(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRangeTemplate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRangeTemplate indicates an expected call of DeleteRangeTemplate.
func (mr *MockIBObjectManagerMockRecorder) DeleteRangeTemplate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRangeTemplate", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteRangeTemplate), arg0)
}

// DeleteSRVRecord mocks base method.
func (m *MockIBObjectManager) DeleteSRVRecord(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSRVRecord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSRVRecord indicates an expected call of DeleteSRVRecord.
func (mr *MockIBObjectManagerMockRecorder) DeleteSRVRecord(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSRVRecord", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteSRVRecord), arg0)
}

// DeleteTXTRecord mocks base method.
func (m *MockIBObjectManager) DeleteTXTRecord(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTXTRecord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTXTRecord indicates an expected call of DeleteTXTRecord.
func (mr *MockIBObjectManagerMockRecorder) DeleteTXTRecord(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTXTRecord", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteTXTRecord), arg0)
}

// DeleteZoneAuth mocks base method.
func (m *MockIBObjectManager) DeleteZoneAuth(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteZoneAuth", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteZoneAuth indicates an expected call of DeleteZoneAuth.
func (mr *MockIBObjectManagerMockRecorder) DeleteZoneAuth(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteZoneAuth", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteZoneAuth), arg0)
}

// DeleteZoneDelegated mocks base method.
func (m *MockIBObjectManager) DeleteZoneDelegated(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteZoneDelegated", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteZoneDelegated indicates an expected call of DeleteZoneDelegated.
func (mr *MockIBObjectManagerMockRecorder) DeleteZoneDelegated(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteZoneDelegated", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteZoneDelegated), arg0)
}

// DeleteZoneForward mocks base method.
func (m *MockIBObjectManager) DeleteZoneForward(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteZoneForward", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteZoneForward indicates an expected call of DeleteZoneForward.
func (mr *MockIBObjectManagerMockRecorder) DeleteZoneForward(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteZoneForward", reflect.TypeOf((*MockIBObjectManager)(nil).DeleteZoneForward), arg0)
}

// GetAAAARecord mocks base method.
func (m *MockIBObjectManager) GetAAAARecord(arg0, arg1, arg2 string) (*ibclient.RecordAAAA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAAAARecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ibclient.RecordAAAA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAAAARecord indicates an expected call of GetAAAARecord.
func (mr *MockIBObjectManagerMockRecorder) GetAAAARecord(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAAAARecord", reflect.TypeOf((*MockIBObjectManager)(nil).GetAAAARecord), arg0, arg1, arg2)
}

// GetAAAARecordByRef mocks base method.
func (m *MockIBObjectManager) GetAAAARecordByRef(arg0 string) (*ibclient.RecordAAAA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAAAARecordByRef", arg0)
	ret0, _ := ret[0].(*ibclient.RecordAAAA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAAAARecordByRef indicates an expected call of GetAAAARecordByRef.
func (mr *MockIBObjectManagerMockRecorder) GetAAAARecordByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAAAARecordByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetAAAARecordByRef), arg0)
}

// GetARecord mocks base method.
func (m *MockIBObjectManager) GetARecord(arg0, arg1, arg2 string) (*ibclient.RecordA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetARecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ibclient.RecordA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetARecord indicates an expected call of GetARecord.
func (mr *MockIBObjectManagerMockRecorder) GetARecord(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetARecord", reflect.TypeOf((*MockIBObjectManager)(nil).GetARecord), arg0, arg1, arg2)
}

// GetARecordByRef mocks base method.
func (m *MockIBObjectManager) GetARecordByRef(arg0 string) (*ibclient.RecordA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetARecordByRef", arg0)
	ret0, _ := ret[0].(*ibclient.RecordA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetARecordByRef indicates an expected call of GetARecordByRef.
func (mr *MockIBObjectManagerMockRecorder) GetARecordByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetARecordByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetARecordByRef), arg0)
}

// GetAliasRecordByRef mocks base method.
func (m *MockIBObjectManager) GetAliasRecordByRef(arg0 string) (*ibclient.RecordAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliasRecordByRef", arg0)
	ret0, _ := ret[0].(*ibclient.RecordAlias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliasRecordByRef indicates an expected call of GetAliasRecordByRef.
func (mr *MockIBObjectManagerMockRecorder) GetAliasRecordByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasRecordByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetAliasRecordByRef), arg0)
}

// GetAllAliasRecord mocks base method.
func (m *MockIBObjectManager) GetAllAliasRecord(arg0 *ibclient.QueryParams) ([]ibclient.RecordAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAliasRecord", arg0)
	ret0, _ := ret[0].([]ibclient.RecordAlias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAliasRecord indicates an expected call of GetAllAliasRecord.
func (mr *MockIBObjectManagerMockRecorder) GetAllAliasRecord(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAliasRecord", reflect.TypeOf((*MockIBObjectManager)(nil).GetAllAliasRecord), arg0)
}

// GetAllDtcLbdn mocks base method.
func (m *MockIBObjectManager) GetAllDtcLbdn(arg0 *ibclient.QueryParams) ([]ibclient.DtcLbdn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDtcLbdn", arg0)
	ret0, _ := ret[0].([]ibclient.DtcLbdn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDtcLbdn indicates an expected call of GetAllDtcLbdn.
func (mr *MockIBObjectManagerMockRecorder) GetAllDtcLbdn(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDtcLbdn", reflect.TypeOf((*MockIBObjectManager)(nil).GetAllDtcLbdn), arg0)
}

// GetAllDtcPool mocks base method.
func (m *MockIBObjectManager) GetAllDtcPool(arg0 *ibclient.QueryParams) ([]ibclient.DtcPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDtcPool", arg0)
	ret0, _ := ret[0].([]ibclient.DtcPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDtcPool indicates an expected call of GetAllDtcPool.
func (mr *MockIBObjectManagerMockRecorder) GetAllDtcPool(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDtcPool", reflect.TypeOf((*MockIBObjectManager)(nil).GetAllDtcPool), arg0)
}

// GetAllDtcServer mocks base method.
func (m *MockIBObjectManager) GetAllDtcServer(arg0 *ibclient.QueryParams) ([]ibclient.DtcServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDtcServer", arg0)
	ret0, _ := ret[0].([]ibclient.DtcServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDtcServer indicates an expected call of GetAllDtcServer.
func (mr *MockIBObjectManagerMockRecorder) GetAllDtcServer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDtcServer", reflect.TypeOf((*MockIBObjectManager)(nil).GetAllDtcServer), arg0)
}

// GetAllFixedAddress mocks base method.
func (m *MockIBObjectManager) GetAllFixedAddress(arg0 *ibclient.QueryParams, arg1 bool) ([]ibclient.FixedAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFixedAddress", arg0, arg1)
	ret0, _ := ret[0].([]ibclient.FixedAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFixedAddress indicates an expected call of GetAllFixedAddress.
func (mr *MockIBObjectManagerMockRecorder) GetAllFixedAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFixedAddress", reflect.TypeOf((*MockIBObjectManager)(nil).GetAllFixedAddress), arg0, arg1)
}

// GetAllIpv4SharedNetwork mocks base method.
func (m *MockIBObjectManager) GetAllIpv4SharedNetwork(arg0 *ibclient.QueryParams) ([]ibclient.SharedNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIpv4SharedNetwork", arg0)
	ret0, _ := ret[0].([]ibclient.SharedNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIpv4SharedNetwork indicates an expected call of GetAllIpv4SharedNetwork.
func (mr *MockIBObjectManagerMockRecorder) GetAllIpv4SharedNetwork(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIpv4SharedNetwork", reflect.TypeOf((*MockIBObjectManager)(nil).GetAllIpv4SharedNetwork), arg0)
}

// GetAllMembers mocks base method.
func (m *MockIBObjectManager) GetAllMembers() ([]ibclient.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMembers")
	ret0, _ := ret[0].([]ibclient.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMembers indicates an expected call of GetAllMembers.
func (mr *MockIBObjectManagerMockRecorder) GetAllMembers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMembers", reflect.TypeOf((*MockIBObjectManager)(nil).GetAllMembers))
}

// GetAllRangeTemplate mocks base method.
func (m *MockIBObjectManager) GetAllRangeTemplate(arg0 *ibclient.QueryParams) ([]ibclient.Rangetemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRangeTemplate", arg0)
	ret0, _ := ret[0].([]ibclient.Rangetemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRangeTemplate indicates an expected call of GetAllRangeTemplate.
func (mr *MockIBObjectManagerMockRecorder) GetAllRangeTemplate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRangeTemplate", reflect.TypeOf((*MockIBObjectManager)(nil).GetAllRangeTemplate), arg0)
}

// GetAllRecordNS mocks base method.
func (m *MockIBObjectManager) GetAllRecordNS(arg0 *ibclient.QueryParams) ([]ibclient.RecordNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecordNS", arg0)
	ret0, _ := ret[0].([]ibclient.RecordNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRecordNS indicates an expected call of GetAllRecordNS.
func (mr *MockIBObjectManagerMockRecorder) GetAllRecordNS(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecordNS", reflect.TypeOf((*MockIBObjectManager)(nil).GetAllRecordNS), arg0)
}

// GetCNAMERecord mocks base method.
func (m *MockIBObjectManager) GetCNAMERecord(arg0, arg1, arg2 string) (*ibclient.RecordCNAME, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCNAMERecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ibclient.RecordCNAME)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCNAMERecord indicates an expected call of GetCNAMERecord.
func (mr *MockIBObjectManagerMockRecorder) GetCNAMERecord(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCNAMERecord", reflect.TypeOf((*MockIBObjectManager)(nil).GetCNAMERecord), arg0, arg1, arg2)
}

// GetCNAMERecordByRef mocks base method.
func (m *MockIBObjectManager) GetCNAMERecordByRef(arg0 string) (*ibclient.RecordCNAME, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCNAMERecordByRef", arg0)
	ret0, _ := ret[0].(*ibclient.RecordCNAME)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCNAMERecordByRef indicates an expected call of GetCNAMERecordByRef.
func (mr *MockIBObjectManagerMockRecorder) GetCNAMERecordByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCNAMERecordByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetCNAMERecordByRef), arg0)
}

// GetCapacityReport mocks base method.
func (m *MockIBObjectManager) GetCapacityReport(arg0 string) ([]ibclient.CapacityReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapacityReport", arg0)
	ret0, _ := ret[0].([]ibclient.CapacityReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapacityReport indicates an expected call of GetCapacityReport.
func (mr *MockIBObjectManagerMockRecorder) GetCapacityReport(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapacityReport", reflect.TypeOf((*MockIBObjectManager)(nil).GetCapacityReport), arg0)
}

// GetDNSView mocks base method.
func (m *MockIBObjectManager) GetDNSView(arg0 string) (*ibclient.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSView", arg0)
	ret0, _ := ret[0].(*ibclient.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSView indicates an expected call of GetDNSView.
func (mr *MockIBObjectManagerMockRecorder) GetDNSView(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSView", reflect.TypeOf((*MockIBObjectManager)(nil).GetDNSView), arg0)
}

// GetDhcpMember mocks base method.
func (m *MockIBObjectManager) GetDhcpMember(arg0 string) ([]ibclient.Dhcp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDhcpMember", arg0)
	ret0, _ := ret[0].([]ibclient.Dhcp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDhcpMember indicates an expected call of GetDhcpMember.
func (mr *MockIBObjectManagerMockRecorder) GetDhcpMember(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDhcpMember", reflect.TypeOf((*MockIBObjectManager)(nil).GetDhcpMember), arg0)
}

// GetDnsMember mocks base method.
func (m *MockIBObjectManager) GetDnsMember(arg0 string) ([]ibclient.Dns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDnsMember", arg0)
	ret0, _ := ret[0].([]ibclient.Dns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDnsMember indicates an expected call of GetDnsMember.
func (mr *MockIBObjectManagerMockRecorder) GetDnsMember(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDnsMember", reflect.TypeOf((*MockIBObjectManager)(nil).GetDnsMember), arg0)
}

// GetDtcLbdn mocks base method.
func (m *MockIBObjectManager) GetDtcLbdn(arg0 string) (*ibclient.DtcLbdn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDtcLbdn", arg0)
	ret0, _ := ret[0].(*ibclient.DtcLbdn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDtcLbdn indicates an expected call of GetDtcLbdn.
func (mr *MockIBObjectManagerMockRecorder) GetDtcLbdn(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDtcLbdn", reflect.TypeOf((*MockIBObjectManager)(nil).GetDtcLbdn), arg0)
}

// GetDtcLbdnByRef mocks base method.
func (m *MockIBObjectManager) GetDtcLbdnByRef(arg0 string) (*ibclient.DtcLbdn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDtcLbdnByRef", arg0)
	ret0, _ := ret[0].(*ibclient.DtcLbdn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDtcLbdnByRef indicates an expected call of GetDtcLbdnByRef.
func (mr *MockIBObjectManagerMockRecorder) GetDtcLbdnByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDtcLbdnByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetDtcLbdnByRef), arg0)
}

// GetDtcPool mocks base method.
func (m *MockIBObjectManager) GetDtcPool(arg0 string) (*ibclient.DtcPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDtcPool", arg0)
	ret0, _ := ret[0].(*ibclient.DtcPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDtcPool indicates an expected call of GetDtcPool.
func (mr *MockIBObjectManagerMockRecorder) GetDtcPool(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDtcPool", reflect.TypeOf((*MockIBObjectManager)(nil).GetDtcPool), arg0)
}

// GetDtcPoolByRef mocks base method.
func (m *MockIBObjectManager) GetDtcPoolByRef(arg0 string) (*ibclient.DtcPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDtcPoolByRef", arg0)
	ret0, _ := ret[0].(*ibclient.DtcPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDtcPoolByRef indicates an expected call of GetDtcPoolByRef.
func (mr *MockIBObjectManagerMockRecorder) GetDtcPoolByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDtcPoolByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetDtcPoolByRef), arg0)
}

// GetDtcServer mocks base method.
func (m *MockIBObjectManager) GetDtcServer(arg0, arg1 string) (*ibclient.DtcServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDtcServer", arg0, arg1)
	ret0, _ := ret[0].(*ibclient.DtcServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDtcServer indicates an expected call of GetDtcServer.
func (mr *MockIBObjectManagerMockRecorder) GetDtcServer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDtcServer", reflect.TypeOf((*MockIBObjectManager)(nil).GetDtcServer), arg0, arg1)
}

// GetDtcServerByRef mocks base method.
func (m *MockIBObjectManager) GetDtcServerByRef(arg0 string) (*ibclient.DtcServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDtcServerByRef", arg0)
	ret0, _ := ret[0].(*ibclient.DtcServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDtcServerByRef indicates an expected call of GetDtcServerByRef.
func (mr *MockIBObjectManagerMockRecorder) GetDtcServerByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDtcServerByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetDtcServerByRef), arg0)
}

// GetEADefinition mocks base method.
func (m *MockIBObjectManager) GetEADefinition(arg0 string) (*ibclient.EADefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEADefinition", arg0)
	ret0, _ := ret[0].(*ibclient.EADefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEADefinition indicates an expected call of GetEADefinition.
func (mr *MockIBObjectManagerMockRecorder) GetEADefinition(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEADefinition", reflect.TypeOf((*MockIBObjectManager)(nil).GetEADefinition), arg0)
}

// GetFixedAddress mocks base method.
func (m *MockIBObjectManager) GetFixedAddress(arg0, arg1, arg2 string, arg3 bool, arg4 string) (*ibclient.FixedAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFixedAddress", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*ibclient.FixedAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFixedAddress indicates an expected call of GetFixedAddress.
func (mr *MockIBObjectManagerMockRecorder) GetFixedAddress(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFixedAddress", reflect.TypeOf((*MockIBObjectManager)(nil).GetFixedAddress), arg0, arg1, arg2, arg3, arg4)
}

// GetFixedAddressByRef mocks base method.
func (m *MockIBObjectManager) GetFixedAddressByRef(arg0 string) (*ibclient.FixedAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFixedAddressByRef", arg0)
	ret0, _ := ret[0].(*ibclient.FixedAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFixedAddressByRef indicates an expected call of GetFixedAddressByRef.
func (mr *MockIBObjectManagerMockRecorder) GetFixedAddressByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFixedAddressByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetFixedAddressByRef), arg0)
}

// GetGridInfo mocks base method.
func (m *MockIBObjectManager) GetGridInfo() ([]ibclient.Grid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGridInfo")
	ret0, _ := ret[0].([]ibclient.Grid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGridInfo indicates an expected call of GetGridInfo.
func (mr *MockIBObjectManagerMockRecorder) GetGridInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGridInfo", reflect.TypeOf((*MockIBObjectManager)(nil).GetGridInfo))
}

// GetGridLicense mocks base method.
func (m *MockIBObjectManager) GetGridLicense() ([]ibclient.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGridLicense")
	ret0, _ := ret[0].([]ibclient.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGridLicense indicates an expected call of GetGridLicense.
func (mr *MockIBObjectManagerMockRecorder) GetGridLicense() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGridLicense", reflect.TypeOf((*MockIBObjectManager)(nil).GetGridLicense))
}

// GetHostRecord mocks base method.
func (m *MockIBObjectManager) GetHostRecord(arg0, arg1, arg2, arg3, arg4 string) (*ibclient.HostRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostRecord", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*ibclient.HostRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostRecord indicates an expected call of GetHostRecord.
func (mr *MockIBObjectManagerMockRecorder) GetHostRecord(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostRecord", reflect.TypeOf((*MockIBObjectManager)(nil).GetHostRecord), arg0, arg1, arg2, arg3, arg4)
}

// GetHostRecordByRef mocks base method.
func (m *MockIBObjectManager) GetHostRecordByRef(arg0 string) (*ibclient.HostRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostRecordByRef", arg0)
	ret0, _ := ret[0].(*ibclient.HostRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostRecordByRef indicates an expected call of GetHostRecordByRef.
func (mr *MockIBObjectManagerMockRecorder) GetHostRecordByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostRecordByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetHostRecordByRef), arg0)
}

// GetIpAddressFromHostRecord mocks base method.
func (m *MockIBObjectManager) GetIpAddressFromHostRecord(arg0 ibclient.HostRecord) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIpAddressFromHostRecord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpAddressFromHostRecord indicates an expected call of GetIpAddressFromHostRecord.
func (mr *MockIBObjectManagerMockRecorder) GetIpAddressFromHostRecord(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpAddressFromHostRecord", reflect.TypeOf((*MockIBObjectManager)(nil).GetIpAddressFromHostRecord), arg0)
}

// GetIpv4SharedNetworkByRef mocks base method.
func (m *MockIBObjectManager) GetIpv4SharedNetworkByRef(arg0 string) (*ibclient.SharedNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIpv4SharedNetworkByRef", arg0)
	ret0, _ := ret[0].(*ibclient.SharedNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpv4SharedNetworkByRef indicates an expected call of GetIpv4SharedNetworkByRef.
func (mr *MockIBObjectManagerMockRecorder) GetIpv4SharedNetworkByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpv4SharedNetworkByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetIpv4SharedNetworkByRef), arg0)
}

// GetMXRecord mocks base method.
func (m *MockIBObjectManager) GetMXRecord(arg0, arg1, arg2 string, arg3 uint32) (*ibclient.RecordMX, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMXRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ibclient.RecordMX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMXRecord indicates an expected call of GetMXRecord.
func (mr *MockIBObjectManagerMockRecorder) GetMXRecord(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMXRecord", reflect.TypeOf((*MockIBObjectManager)(nil).GetMXRecord), arg0, arg1, arg2, arg3)
}

// GetMXRecordByRef mocks base method.
func (m *MockIBObjectManager) GetMXRecordByRef(arg0 string) (*ibclient.RecordMX, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMXRecordByRef", arg0)
	ret0, _ := ret[0].(*ibclient.RecordMX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMXRecordByRef indicates an expected call of GetMXRecordByRef.
func (mr *MockIBObjectManagerMockRecorder) GetMXRecordByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMXRecordByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetMXRecordByRef), arg0)
}

// GetNSRecordByRef mocks base method.
func (m *MockIBObjectManager) GetNSRecordByRef(arg0 string) (*ibclient.RecordNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNSRecordByRef", arg0)
	ret0, _ := ret[0].(*ibclient.RecordNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNSRecordByRef indicates an expected call of GetNSRecordByRef.
func (mr *MockIBObjectManagerMockRecorder) GetNSRecordByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNSRecordByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetNSRecordByRef), arg0)
}

// GetNetwork mocks base method.
func (m *MockIBObjectManager) GetNetwork(arg0, arg1 string, arg2 bool, arg3 ibclient.EA) (*ibclient.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ibclient.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockIBObjectManagerMockRecorder) GetNetwork(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockIBObjectManager)(nil).GetNetwork), arg0, arg1, arg2, arg3)
}

// GetNetworkByRef mocks base method.
func (m *MockIBObjectManager) GetNetworkByRef(arg0 string) (*ibclient.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkByRef", arg0)
	ret0, _ := ret[0].(*ibclient.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkByRef indicates an expected call of GetNetworkByRef.
func (mr *MockIBObjectManagerMockRecorder) GetNetworkByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetNetworkByRef), arg0)
}

// GetNetworkContainer mocks base method.
func (m *MockIBObjectManager) GetNetworkContainer(arg0, arg1 string, arg2 bool, arg3 ibclient.EA) (*ibclient.NetworkContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkContainer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ibclient.NetworkContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkContainer indicates an expected call of GetNetworkContainer.
func (mr *MockIBObjectManagerMockRecorder) GetNetworkContainer(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkContainer", reflect.TypeOf((*MockIBObjectManager)(nil).GetNetworkContainer), arg0, arg1, arg2, arg3)
}

// GetNetworkContainerByRef mocks base method.
func (m *MockIBObjectManager) GetNetworkContainerByRef(arg0 string) (*ibclient.NetworkContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkContainerByRef", arg0)
	ret0, _ := ret[0].(*ibclient.NetworkContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkContainerByRef indicates an expected call of GetNetworkContainerByRef.
func (mr *MockIBObjectManagerMockRecorder) GetNetworkContainerByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkContainerByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetNetworkContainerByRef), arg0)
}

// GetNetworkRange mocks base method.
func (m *MockIBObjectManager) GetNetworkRange(arg0 *ibclient.QueryParams) ([]ibclient.Range, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRange", arg0)
	ret0, _ := ret[0].([]ibclient.Range)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRange indicates an expected call of GetNetworkRange.
func (mr *MockIBObjectManagerMockRecorder) GetNetworkRange(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRange", reflect.TypeOf((*MockIBObjectManager)(nil).GetNetworkRange), arg0)
}

// GetNetworkRangeByRef mocks base method.
func (m *MockIBObjectManager) GetNetworkRangeByRef(arg0 string) (*ibclient.Range, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRangeByRef", arg0)
	ret0, _ := ret[0].(*ibclient.Range)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRangeByRef indicates an expected call of GetNetworkRangeByRef.
func (mr *MockIBObjectManagerMockRecorder) GetNetworkRangeByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRangeByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetNetworkRangeByRef), arg0)
}

// GetNetworkView mocks base method.
func (m *MockIBObjectManager) GetNetworkView(arg0 string) (*ibclient.NetworkView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkView", arg0)
	ret0, _ := ret[0].(*ibclient.NetworkView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkView indicates an expected call of GetNetworkView.
func (mr *MockIBObjectManagerMockRecorder) GetNetworkView(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkView", reflect.TypeOf((*MockIBObjectManager)(nil).GetNetworkView), arg0)
}

// GetNetworkViewByRef mocks base method.
func (m *MockIBObjectManager) GetNetworkViewByRef(arg0 string) (*ibclient.NetworkView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkViewByRef", arg0)
	ret0, _ := ret[0].(*ibclient.NetworkView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkViewByRef indicates an expected call of GetNetworkViewByRef.
func (mr *MockIBObjectManagerMockRecorder) GetNetworkViewByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkViewByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetNetworkViewByRef), arg0)
}

// GetPTRRecord mocks base method.
func (m *MockIBObjectManager) GetPTRRecord(arg0, arg1, arg2, arg3 string) (*ibclient.RecordPTR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPTRRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ibclient.RecordPTR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPTRRecord indicates an expected call of GetPTRRecord.
func (mr *MockIBObjectManagerMockRecorder) GetPTRRecord(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPTRRecord", reflect.TypeOf((*MockIBObjectManager)(nil).GetPTRRecord), arg0, arg1, arg2, arg3)
}

// GetPTRRecordByRef mocks base method.
func (m *MockIBObjectManager) GetPTRRecordByRef(arg0 string) (*ibclient.RecordPTR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPTRRecordByRef", arg0)
	ret0, _ := ret[0].(*ibclient.RecordPTR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPTRRecordByRef indicates an expected call of GetPTRRecordByRef.
func (mr *MockIBObjectManagerMockRecorder) GetPTRRecordByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPTRRecordByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetPTRRecordByRef), arg0)
}

// GetRangeTemplateByRef mocks base method.
func (m *MockIBObjectManager) GetRangeTemplateByRef(arg0 string) (*ibclient.Rangetemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRangeTemplateByRef", arg0)
	ret0, _ := ret[0].(*ibclient.Rangetemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRangeTemplateByRef indicates an expected call of GetRangeTemplateByRef.
func (mr *MockIBObjectManagerMockRecorder) GetRangeTemplateByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRangeTemplateByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetRangeTemplateByRef), arg0)
}

// GetSRVRecord mocks base method.
func (m *MockIBObjectManager) GetSRVRecord(arg0, arg1, arg2 string, arg3 uint32) (*ibclient.RecordSRV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSRVRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ibclient.RecordSRV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSRVRecord indicates an expected call of GetSRVRecord.
func (mr *MockIBObjectManagerMockRecorder) GetSRVRecord(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSRVRecord", reflect.TypeOf((*MockIBObjectManager)(nil).GetSRVRecord), arg0, arg1, arg2, arg3)
}

// GetSRVRecordByRef mocks base method.
func (m *MockIBObjectManager) GetSRVRecordByRef(arg0 string) (*ibclient.RecordSRV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSRVRecordByRef", arg0)
	ret0, _ := ret[0].(*ibclient.RecordSRV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSRVRecordByRef indicates an expected call of GetSRVRecordByRef.
func (mr *MockIBObjectManagerMockRecorder) GetSRVRecordByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSRVRecordByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetSRVRecordByRef), arg0)
}

// GetTXTRecord mocks base method.
func (m *MockIBObjectManager) GetTXTRecord(arg0, arg1 string) (*ibclient.RecordTXT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTXTRecord", arg0, arg1)
	ret0, _ := ret[0].(*ibclient.RecordTXT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTXTRecord indicates an expected call of GetTXTRecord.
func (mr *MockIBObjectManagerMockRecorder) GetTXTRecord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTXTRecord", reflect.TypeOf((*MockIBObjectManager)(nil).GetTXTRecord), arg0, arg1)
}

// GetTXTRecordByRef mocks base method.
func (m *MockIBObjectManager) GetTXTRecordByRef(arg0 string) (*ibclient.RecordTXT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTXTRecordByRef", arg0)
	ret0, _ := ret[0].(*ibclient.RecordTXT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTXTRecordByRef indicates an expected call of GetTXTRecordByRef.
func (mr *MockIBObjectManagerMockRecorder) GetTXTRecordByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTXTRecordByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetTXTRecordByRef), arg0)
}

// GetUpgradeStatus mocks base method.
func (m *MockIBObjectManager) GetUpgradeStatus(arg0 string) ([]ibclient.UpgradeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpgradeStatus", arg0)
	ret0, _ := ret[0].([]ibclient.UpgradeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpgradeStatus indicates an expected call of GetUpgradeStatus.
func (mr *MockIBObjectManagerMockRecorder) GetUpgradeStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeStatus", reflect.TypeOf((*MockIBObjectManager)(nil).GetUpgradeStatus), arg0)
}

// GetZoneAuthByRef mocks base method.
func (m *MockIBObjectManager) GetZoneAuthByRef(arg0 string) (*ibclient.ZoneAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneAuthByRef", arg0)
	ret0, _ := ret[0].(*ibclient.ZoneAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneAuthByRef indicates an expected call of GetZoneAuthByRef.
func (mr *MockIBObjectManagerMockRecorder) GetZoneAuthByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneAuthByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetZoneAuthByRef), arg0)
}

// GetZoneDelegated mocks base method.
func (m *MockIBObjectManager) GetZoneDelegated(arg0 string) (*ibclient.ZoneDelegated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneDelegated", arg0)
	ret0, _ := ret[0].(*ibclient.ZoneDelegated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneDelegated indicates an expected call of GetZoneDelegated.
func (mr *MockIBObjectManagerMockRecorder) GetZoneDelegated(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneDelegated", reflect.TypeOf((*MockIBObjectManager)(nil).GetZoneDelegated), arg0)
}

// GetZoneDelegatedByFilters mocks base method.
func (m *MockIBObjectManager) GetZoneDelegatedByFilters(arg0 *ibclient.QueryParams) ([]ibclient.ZoneDelegated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneDelegatedByFilters", arg0)
	ret0, _ := ret[0].([]ibclient.ZoneDelegated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneDelegatedByFilters indicates an expected call of GetZoneDelegatedByFilters.
func (mr *MockIBObjectManagerMockRecorder) GetZoneDelegatedByFilters(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneDelegatedByFilters", reflect.TypeOf((*MockIBObjectManager)(nil).GetZoneDelegatedByFilters), arg0)
}

// GetZoneDelegatedByRef mocks base method.
func (m *MockIBObjectManager) GetZoneDelegatedByRef(arg0 string) (*ibclient.ZoneDelegated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneDelegatedByRef", arg0)
	ret0, _ := ret[0].(*ibclient.ZoneDelegated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneDelegatedByRef indicates an expected call of GetZoneDelegatedByRef.
func (mr *MockIBObjectManagerMockRecorder) GetZoneDelegatedByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneDelegatedByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetZoneDelegatedByRef), arg0)
}

// GetZoneForwardByRef mocks base method.
func (m *MockIBObjectManager) GetZoneForwardByRef(arg0 string) (*ibclient.ZoneForward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneForwardByRef", arg0)
	ret0, _ := ret[0].(*ibclient.ZoneForward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneForwardByRef indicates an expected call of GetZoneForwardByRef.
func (mr *MockIBObjectManagerMockRecorder) GetZoneForwardByRef(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneForwardByRef", reflect.TypeOf((*MockIBObjectManager)(nil).GetZoneForwardByRef), arg0)
}

// GetZoneForwardFilters mocks base method.
func (m *MockIBObjectManager) GetZoneForwardFilters(arg0 *ibclient.QueryParams) ([]ibclient.ZoneForward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneForwardFilters", arg0)
	ret0, _ := ret[0].([]ibclient.ZoneForward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneForwardFilters indicates an expected call of GetZoneForwardFilters.
func (mr *MockIBObjectManagerMockRecorder) GetZoneForwardFilters(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneForwardFilters", reflect.TypeOf((*MockIBObjectManager)(nil).GetZoneForwardFilters), arg0)
}

// ReleaseIP mocks base method.
func (m *MockIBObjectManager) ReleaseIP(arg0, arg1, arg2 string, arg3 bool, arg4 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseIP", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseIP indicates an expected call of ReleaseIP.
func (mr *MockIBObjectManagerMockRecorder) ReleaseIP(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseIP", reflect.TypeOf((*MockIBObjectManager)(nil).ReleaseIP), arg0, arg1, arg2, arg3, arg4)
}

// SearchHostRecordByAltId mocks base method.
func (m *MockIBObjectManager) SearchHostRecordByAltId(arg0, arg1, arg2 string) (*ibclient.HostRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchHostRecordByAltId", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ibclient.HostRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchHostRecordByAltId indicates an expected call of SearchHostRecordByAltId.
func (mr *MockIBObjectManagerMockRecorder) SearchHostRecordByAltId(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchHostRecordByAltId", reflect.TypeOf((*MockIBObjectManager)(nil).SearchHostRecordByAltId), arg0, arg1, arg2)
}

// SearchObjectByAltId mocks base method.
func (m *MockIBObjectManager) SearchObjectByAltId(arg0, arg1, arg2, arg3 string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchObjectByAltId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchObjectByAltId indicates an expected call of SearchObjectByAltId.
func (mr *MockIBObjectManagerMockRecorder) SearchObjectByAltId(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchObjectByAltId", reflect.TypeOf((*MockIBObjectManager)(nil).SearchObjectByAltId), arg0, arg1, arg2, arg3)
}

// UpdateAAAARecord mocks base method.
func (m *MockIBObjectManager) UpdateAAAARecord(arg0, arg1, arg2, arg3, arg4 string, arg5 bool, arg6 uint32, arg7 string, arg8 ibclient.EA) (*ibclient.RecordAAAA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAAAARecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*ibclient.RecordAAAA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAAAARecord indicates an expected call of UpdateAAAARecord.
func (mr *MockIBObjectManagerMockRecorder) UpdateAAAARecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAAAARecord", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateAAAARecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// UpdateARecord mocks base method.
func (m *MockIBObjectManager) UpdateARecord(arg0, arg1, arg2, arg3, arg4 string, arg5 uint32, arg6 bool, arg7 string, arg8 ibclient.EA) (*ibclient.RecordA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateARecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*ibclient.RecordA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateARecord indicates an expected call of UpdateARecord.
func (mr *MockIBObjectManagerMockRecorder) UpdateARecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateARecord", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateARecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// UpdateAliasRecord mocks base method.
func (m *MockIBObjectManager) UpdateAliasRecord(arg0, arg1, arg2, arg3, arg4, arg5 string, arg6 bool, arg7 ibclient.EA, arg8 uint32, arg9 bool) (*ibclient.RecordAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAliasRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(*ibclient.RecordAlias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAliasRecord indicates an expected call of UpdateAliasRecord.
func (mr *MockIBObjectManagerMockRecorder) UpdateAliasRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAliasRecord", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateAliasRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// UpdateCNAMERecord mocks base method.
func (m *MockIBObjectManager) UpdateCNAMERecord(arg0, arg1, arg2 string, arg3 bool, arg4 uint32, arg5 string, arg6 ibclient.EA) (*ibclient.RecordCNAME, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCNAMERecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*ibclient.RecordCNAME)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCNAMERecord indicates an expected call of UpdateCNAMERecord.
func (mr *MockIBObjectManagerMockRecorder) UpdateCNAMERecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCNAMERecord", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateCNAMERecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// UpdateDhcpStatus mocks base method.
func (m *MockIBObjectManager) UpdateDhcpStatus(arg0 string, arg1 bool) (ibclient.Dhcp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDhcpStatus", arg0, arg1)
	ret0, _ := ret[0].(ibclient.Dhcp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDhcpStatus indicates an expected call of UpdateDhcpStatus.
func (mr *MockIBObjectManagerMockRecorder) UpdateDhcpStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDhcpStatus", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateDhcpStatus), arg0, arg1)
}

// UpdateDnsStatus mocks base method.
func (m *MockIBObjectManager) UpdateDnsStatus(arg0 string, arg1 bool) (ibclient.Dns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDnsStatus", arg0, arg1)
	ret0, _ := ret[0].(ibclient.Dns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDnsStatus indicates an expected call of UpdateDnsStatus.
func (mr *MockIBObjectManagerMockRecorder) UpdateDnsStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDnsStatus", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateDnsStatus), arg0, arg1)
}

// UpdateDtcLbdn mocks base method.
func (m *MockIBObjectManager) UpdateDtcLbdn(arg0, arg1 string, arg2 []ibclient.AuthZonesLink, arg3 string, arg4, arg5 bool, arg6 ibclient.EA, arg7 string, arg8 []string, arg9 uint32, arg10 []*ibclient.DtcPoolLink, arg11 uint32, arg12 *string, arg13 []string, arg14 uint32, arg15 bool) (*ibclient.DtcLbdn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDtcLbdn", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
	ret0, _ := ret[0].(*ibclient.DtcLbdn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDtcLbdn indicates an expected call of UpdateDtcLbdn.
func (mr *MockIBObjectManagerMockRecorder) UpdateDtcLbdn(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDtcLbdn", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateDtcLbdn), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
}

// UpdateDtcPool mocks base method.
func (m *MockIBObjectManager) UpdateDtcPool(arg0, arg1, arg2, arg3 string, arg4 map[string]any, arg5 []*ibclient.DtcServerLink, arg6 []ibclient.Monitor, arg7 *string, arg8 string, arg9 *string, arg10 map[string]any, arg11 ibclient.EA, arg12 bool, arg13 string, arg14 []map[string]any, arg15 uint32, arg16, arg17 bool, arg18 uint32) (*ibclient.DtcPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDtcPool", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
	ret0, _ := ret[0].(*ibclient.DtcPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDtcPool indicates an expected call of UpdateDtcPool.
func (mr *MockIBObjectManagerMockRecorder) UpdateDtcPool(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDtcPool", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateDtcPool), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
}

// UpdateDtcServer mocks base method.
func (m *MockIBObjectManager) UpdateDtcServer(arg0, arg1, arg2, arg3 string, arg4, arg5 bool, arg6 ibclient.EA, arg7 []map[string]any, arg8 string, arg9 bool) (*ibclient.DtcServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDtcServer", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(*ibclient.DtcServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDtcServer indicates an expected call of UpdateDtcServer.
func (mr *MockIBObjectManagerMockRecorder) UpdateDtcServer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDtcServer", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateDtcServer), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// UpdateFixedAddress mocks base method.
func (m *MockIBObjectManager) UpdateFixedAddress(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 string, arg8 ibclient.EA, arg9, arg10 string, arg11 *bool, arg12 string, arg13 bool, arg14 []*ibclient.Dhcpoption, arg15 bool) (*ibclient.FixedAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFixedAddress", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
	ret0, _ := ret[0].(*ibclient.FixedAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFixedAddress indicates an expected call of UpdateFixedAddress.
func (mr *MockIBObjectManagerMockRecorder) UpdateFixedAddress(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFixedAddress", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateFixedAddress), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
}

// UpdateHostRecord mocks base method.
func (m *MockIBObjectManager) UpdateHostRecord(arg0 string, arg1, arg2 bool, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11 string, arg12 bool, arg13 uint32, arg14 string, arg15 ibclient.EA, arg16 []string, arg17 bool) (*ibclient.HostRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
	ret0, _ := ret[0].(*ibclient.HostRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostRecord indicates an expected call of UpdateHostRecord.
func (mr *MockIBObjectManagerMockRecorder) UpdateHostRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostRecord", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateHostRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
}

// UpdateIpv4SharedNetwork mocks base method.
func (m *MockIBObjectManager) UpdateIpv4SharedNetwork(arg0, arg1 string, arg2 []string, arg3, arg4 string, arg5 ibclient.EA, arg6, arg7 bool, arg8 []*ibclient.Dhcpoption) (*ibclient.SharedNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIpv4SharedNetwork", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*ibclient.SharedNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIpv4SharedNetwork indicates an expected call of UpdateIpv4SharedNetwork.
func (mr *MockIBObjectManagerMockRecorder) UpdateIpv4SharedNetwork(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIpv4SharedNetwork", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateIpv4SharedNetwork), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// UpdateMXRecord mocks base method.
func (m *MockIBObjectManager) UpdateMXRecord(arg0, arg1, arg2, arg3 string, arg4, arg5 uint32, arg6 bool, arg7 string, arg8 ibclient.EA) (*ibclient.RecordMX, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMXRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*ibclient.RecordMX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMXRecord indicates an expected call of UpdateMXRecord.
func (mr *MockIBObjectManagerMockRecorder) UpdateMXRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMXRecord", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateMXRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// UpdateNSRecord mocks base method.
func (m *MockIBObjectManager) UpdateNSRecord(arg0, arg1, arg2, arg3 string, arg4 []*ibclient.ZoneNameServer, arg5 string) (*ibclient.RecordNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNSRecord", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*ibclient.RecordNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNSRecord indicates an expected call of UpdateNSRecord.
func (mr *MockIBObjectManagerMockRecorder) UpdateNSRecord(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNSRecord", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateNSRecord), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateNetwork mocks base method.
func (m *MockIBObjectManager) UpdateNetwork(arg0 string, arg1 ibclient.EA, arg2 string) (*ibclient.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetwork", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ibclient.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetwork indicates an expected call of UpdateNetwork.
func (mr *MockIBObjectManagerMockRecorder) UpdateNetwork(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetwork", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateNetwork), arg0, arg1, arg2)
}

// UpdateNetworkContainer mocks base method.
func (m *MockIBObjectManager) UpdateNetworkContainer(arg0 string, arg1 ibclient.EA, arg2 string) (*ibclient.NetworkContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ibclient.NetworkContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetworkContainer indicates an expected call of UpdateNetworkContainer.
func (mr *MockIBObjectManagerMockRecorder) UpdateNetworkContainer(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkContainer", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateNetworkContainer), arg0, arg1, arg2)
}

// UpdateNetworkRange mocks base method.
func (m *MockIBObjectManager) UpdateNetworkRange(arg0, arg1, arg2, arg3, arg4, arg5 string, arg6 bool, arg7 ibclient.EA, arg8 *ibclient.Dhcpmember, arg9 string, arg10 []*ibclient.Dhcpoption, arg11 bool, arg12, arg13, arg14 string) (*ibclient.Range, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkRange", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
	ret0, _ := ret[0].(*ibclient.Range)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetworkRange indicates an expected call of UpdateNetworkRange.
func (mr *MockIBObjectManagerMockRecorder) UpdateNetworkRange(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkRange", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateNetworkRange), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
}

// UpdateNetworkView mocks base method.
func (m *MockIBObjectManager) UpdateNetworkView(arg0, arg1, arg2 string, arg3 ibclient.EA) (*ibclient.NetworkView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkView", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ibclient.NetworkView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetworkView indicates an expected call of UpdateNetworkView.
func (mr *MockIBObjectManagerMockRecorder) UpdateNetworkView(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkView", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateNetworkView), arg0, arg1, arg2, arg3)
}

// UpdatePTRRecord mocks base method.
func (m *MockIBObjectManager) UpdatePTRRecord(arg0, arg1, arg2, arg3, arg4, arg5 string, arg6 bool, arg7 uint32, arg8 string, arg9 ibclient.EA) (*ibclient.RecordPTR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePTRRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(*ibclient.RecordPTR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePTRRecord indicates an expected call of UpdatePTRRecord.
func (mr *MockIBObjectManagerMockRecorder) UpdatePTRRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePTRRecord", reflect.TypeOf((*MockIBObjectManager)(nil).UpdatePTRRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// UpdateRangeTemplate mocks base method.
func (m *MockIBObjectManager) UpdateRangeTemplate(arg0, arg1 string, arg2, arg3 uint32, arg4 string, arg5 ibclient.EA, arg6 []*ibclient.Dhcpoption, arg7 bool, arg8, arg9 string, arg10 *ibclient.Dhcpmember, arg11 bool, arg12 string) (*ibclient.Rangetemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRangeTemplate", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
	ret0, _ := ret[0].(*ibclient.Rangetemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRangeTemplate indicates an expected call of UpdateRangeTemplate.
func (mr *MockIBObjectManagerMockRecorder) UpdateRangeTemplate(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRangeTemplate", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateRangeTemplate), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
}

// UpdateSRVRecord mocks base method.
func (m *MockIBObjectManager) UpdateSRVRecord(arg0, arg1 string, arg2, arg3, arg4 uint32, arg5 string, arg6 uint32, arg7 bool, arg8 string, arg9 ibclient.EA) (*ibclient.RecordSRV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSRVRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(*ibclient.RecordSRV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSRVRecord indicates an expected call of UpdateSRVRecord.
func (mr *MockIBObjectManagerMockRecorder) UpdateSRVRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSRVRecord", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateSRVRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// UpdateTXTRecord mocks base method.
func (m *MockIBObjectManager) UpdateTXTRecord(arg0, arg1, arg2 string, arg3 uint32, arg4 bool, arg5 string, arg6 ibclient.EA) (*ibclient.RecordTXT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTXTRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*ibclient.RecordTXT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTXTRecord indicates an expected call of UpdateTXTRecord.
func (mr *MockIBObjectManagerMockRecorder) UpdateTXTRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTXTRecord", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateTXTRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// UpdateZoneDelegated mocks base method.
func (m *MockIBObjectManager) UpdateZoneDelegated(arg0 string, arg1 ibclient.NullableNameServers, arg2 string, arg3, arg4 bool, arg5 string, arg6 uint32, arg7 bool, arg8 ibclient.EA) (*ibclient.ZoneDelegated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateZoneDelegated", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*ibclient.ZoneDelegated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateZoneDelegated indicates an expected call of UpdateZoneDelegated.
func (mr *MockIBObjectManagerMockRecorder) UpdateZoneDelegated(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateZoneDelegated", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateZoneDelegated), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// UpdateZoneForward mocks base method.
func (m *MockIBObjectManager) UpdateZoneForward(arg0, arg1 string, arg2 bool, arg3 ibclient.EA, arg4 ibclient.NullableNameServers, arg5 bool, arg6 *ibclient.NullableForwardingServers, arg7, arg8 string) (*ibclient.ZoneForward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateZoneForward", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*ibclient.ZoneForward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateZoneForward indicates an expected call of UpdateZoneForward.
func (mr *MockIBObjectManagerMockRecorder) UpdateZoneForward(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateZoneForward", reflect.TypeOf((*MockIBObjectManager)(nil).UpdateZoneForward), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}
