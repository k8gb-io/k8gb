package common

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"fmt"

	"github.com/k8gb-io/k8gb/api/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type QueryMode int

const (
	QueryModeList QueryMode = iota
	QueryModeGet
)

type QueryOptions struct {
	Mode     QueryMode
	GetKey   *types.NamespacedName
	ListOpts *client.ListOptions
}

func GetQueryOptions(rr v1beta1.ResourceRef, namespace string) (*QueryOptions, error) {
	if rr.Name != "" && rr.LabelSelector.MatchLabels == nil && len(rr.LabelSelector.MatchExpressions) == 0 {
		return &QueryOptions{
			Mode:   QueryModeGet,
			GetKey: &types.NamespacedName{Name: rr.Name, Namespace: namespace},
		}, nil
	}

	if rr.LabelSelector.MatchLabels != nil || len(rr.LabelSelector.MatchExpressions) > 0 {
		selector, err := metav1.LabelSelectorAsSelector(&rr.LabelSelector)
		if err != nil {
			return nil, err
		}
		opts := &client.ListOptions{
			Namespace:     namespace,
			LabelSelector: selector,
		}
		return &QueryOptions{
			Mode:     QueryModeList,
			ListOpts: opts,
		}, nil
	}

	return nil, fmt.Errorf("gslb spec must contain label selector or name")
}
