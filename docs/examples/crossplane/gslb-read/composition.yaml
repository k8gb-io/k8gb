apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: function-gsbl-check
spec:
  compositeTypeRef:
    apiVersion: example.crossplane.io/v1
    kind: XR
  mode: Pipeline
  pipeline:
  - step: normal
    functionRef:
      name: kcl-function
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        name: basic
      spec:
        source: |

          oxr = option("params").oxr
          ocds = option("params").ocds
          _dxr = {
              **option("params").dxr
              status.gslb = {}
          }

          gslb = {
            apiVersion = "kubernetes.crossplane.io/v1alpha2"
            kind = "Object"
            metadata = {
                name = "failover-ingress"
                annotations = {
                  "krm.kcl.dev/composition-resource-name" = "gslb"
                  "krm.kcl.dev/ready": "True"
                }
            }
            spec = {
              managementPolicies = ["Observe"]
              watch = True
              forProvider = {
                manifest = {
                  apiVersion = "k8gb.absa.oss/v1beta1"
                  kind = "Gslb"
                  metadata = {
                    name = "failover-ingress"
                    namespace = "test-gslb"
                  }
                }
              }
            }
          }

          if "gslb" in ocds:
            serviceHealth = ocds["gslb"].Resource?.status?.atProvider?.manifest?.status?.serviceHealth
            if serviceHealth:
              _unhealthyDomains = [k for k, v in serviceHealth if v != "Healthy"]
              if len(_unhealthyDomains) == 0:
                _dxr.status.gslb.healthy = "All {} GSLB domains are healthy".format(len(serviceHealth))
              else:
                _dxr.status.gslb.healthy = "GSLB UNHEALTHY: {} ({}/{} unhealthy)".format(_unhealthyDomains, len(_unhealthyDomains), len(serviceHealth))
            else:
              _dxr.status.gslb.healthy = "No GSLB serviceHealth data available"
          else:
            _dxr.status.gslb.healthy = "GSLB resource not found"

          items = [ gslb, _dxr ]
