global:
  # -- Reference to one or more secrets to be used when pulling images 
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
  # - name: "image-pull-secret"

k8gb:
  # -- image repository
  imageRepo: "absaoss/k8gb"
  # -- ( string ) image tag defaults to Chart.AppVersion, see Chart.yaml, but can be overrided with imageTag key
  imageTag:
  # -- whether it should also deploy the gslb and dnsendpoints CRDs
  deployCrds: true
  # -- whether it should also deploy the service account, cluster role and cluster role binding
  deployRbac: true
  # -- dnsZone controlled by gslb
  dnsZone: "cloud.example.com"
  # -- Negative TTL for SOA record
  dnsZoneNegTTL: 300
  # -- main zone which would contain gslb zone to delegate
  edgeDNSZone: "example.com" # main zone which would contain gslb zone to delegate
  # -- host/ip[:port] format is supported here where port defaults to 53
  edgeDNSServers:
      # -- use this DNS server as a main resolver to enable cross k8gb DNS based communication
      - "1.1.1.1"
  # -- used for places where we need to distinguish between different Gslb instances
  clusterGeoTag: "eu"
  # -- comma-separated list of external gslb geo tags to pair with
  extGslbClustersGeoTags: "us"
  # -- Reconcile time in seconds
  reconcileRequeueSeconds: 30
  log:
    # -- log format (simple,json)
    format: simple # log format (simple,json)
    # -- log level (panic,fatal,error,warn,info,debug,trace)
    level: info # log level (panic,fatal,error,warn,info,debug,trace)
  # -- Enable SplitBrain check (Infoblox only)
  splitBrainCheck: false
  # -- Metrics server address
  metricsAddress: "0.0.0.0:8080"
  securityContext:
    # -- For more options consult https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#securitycontext-v1-core
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    runAsUser: 1000

externaldns:
  # -- external-dns image repo:tag
  image: k8s.gcr.io/external-dns/external-dns:v0.9.0
  # -- external-dns sync interval
  interval: "20s"
  securityContext:
    # -- For more options consult https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#securitycontext-v1-core
    runAsUser: 1000
    # -- For ExternalDNS to be able to read Kubernetes and AWS token files
    fsGroup: 65534 # For ExternalDNS to be able to read Kubernetes and AWS token files
    runAsNonRoot: true

coredns:
  # -- service: refer to https://www.k8gb.io/docs/service_upgrade.html for upgrading CoreDNS service steps
  isClusterService: false
  deployment:
    # -- Skip CoreDNS creation and uses the one shipped by k8gb instead
    skipConfig: true
  image:
    # -- CoreDNS CRD plugin image
    repository: absaoss/k8s_crd
    # -- image tag
    tag: v0.0.8
  # -- Creates serviceAccount for coredns
  serviceAccount:
    create: true
    name: coredns

infoblox:
  # -- infoblox provider enabled
  enabled: false
  # -- WAPI address
  gridHost: 10.0.0.1
  # -- WAPI version
  wapiVersion: 2.3.1
  # -- WAPI port
  wapiPort: 443
  # -- use SSL
  sslVerify: true
  # -- Request Timeout in secconds
  httpRequestTimeout: 20
  # -- Size of connections pool
  httpPoolConnections: 10

route53:
  # -- Enable Route53 provider
  enabled: false
  # -- Route53 ZoneID
  hostedZoneID: ZXXXSSS
  # -- specify IRSA Role in AWS ARN format or disable it by setting to `false`
  irsaRole: arn:aws:iam::111111:role/external-dns

ns1:
  # -- Enable NS1 provider
  enabled: false
  # -- optional custom NS1 API endpoint for on-prem setups
  # endpoint: https://api.nsone.net/v1/
  ignoreSSL: false

openshift:
  # -- Install OpenShift specific RBAC
  enabled: false

rfc2136:
  enabled: false
  rfc2136Opts:
    - host: host.k3d.internal
    - port: 1053
    - tsig-secret-alg: hmac-sha256
    - tsig-keyname: externaldns-key

tracing:
  # -- if the application should be sending the traces to OTLP collector (env var `TRACING_ENABLED`)
  enabled: false

  # -- should the Jaeger be deployed together with the k8gb operator? In case of using another OpenTracing solution,
  # make sure that configmap for OTEL agent has the correct exporters set up (`tracing.otelConfig`).
  deployJaeger: false

  # -- `host:port` where the spans from the applications (traces) should be sent, sets the `OTEL_EXPORTER_OTLP_ENDPOINT` env var
  # This is not the final destination where all the traces are going. Otel collector has its configuration in the associated configmap (`tracing.otelConfig`).
  endpoint: localhost:4318

  # -- float representing the ratio of how often the span should be kept/dropped (env var `TRACING_SAMPLING_RATIO`)
  # if not specified, the AlwaysSample will be used which is the same as 1.0. `0.1` would mean that 10% of samples will be kept
  samplingRatio: null

  # -- configuration for OTEL collector, this will be represented as configmap called `agent-config`
  otelConfig: null

  sidecarImage:
    # -- OpenTelemetry collector into which the k8gb operator sends the spans. It can be further configured to send its data
    # to somewhere else using exporters (Jaeger for instance)
    repository: otel/opentelemetry-collector
    tag: 0.57.2
    pullPolicy: Always

  jaegerImage:
    # -- if `tracing.deployJaeger==true` this image will be used in the deployment for Jaeger
    repository: jaegertracing/all-in-one
    tag: 1.37.0
    pullPolicy: Always
