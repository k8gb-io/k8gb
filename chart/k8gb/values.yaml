global:
  # -- Reference to one or more secrets to be used when pulling images
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
  # - name: "image-pull-secret"

k8gb:
  # -- image repository
  imageRepo: "docker.io/absaoss/k8gb"
  # -- ( string ) image tag defaults to Chart.AppVersion, see Chart.yaml, but can be overrided with imageTag key
  imageTag:
  # -- whether it should also deploy the gslb and dnsendpoints CRDs
  deployCrds: true
  # -- whether it should also deploy the service account, cluster role and cluster role binding
  deployRbac: true
  # DNSZones - For backward compatibility, the dnsZone and edgeDNSZone fields are allowed; otherwise,
  # the dnsZones array is used. For valid values, use either dnsZone and edgeDNSZone or dnsZones.
  #
  # -- array of dns zones controlled by gslb
  dnsZones:
    - parentZone: "example.com" # -- parent zone which would contain gslb zone to delegate (same meaning as the old edgeDNSZone)
      loadBalancedZone: "cloud.example.com" # -- zone controlled by gslb (same meaning as the old dnsZone)
      dnsZoneNegTTL: 30  # -- Negative TTL for SOA record# -- host/ip[:port] format is supported here where port defaults to 53
  edgeDNSServers:
    # -- use this DNS server as a main resolver to enable cross k8gb DNS based communication
    - "1.1.1.1"
  # -- Unique geotag for this K8GB instance. This tag identifies the cluster's location or role (e.g., "eu", "us-east", "dc1" or "primary"). This tag should be present in all clustersâ€™ extGslbClustersGeoTags
  clusterGeoTag: "eu"
  # -- Comma-separated list of geotags for external K8GB clusters. These are arbitrary, user-defined identifiers (e.g., "eu,us" or "dc2,dc3") used for coordination between K8GB instances
  # If the value remains empty, dynamic geotags extracted from the NS records on the edge DNS will be used.
  extGslbClustersGeoTags: "eu,us"
  # -- Reconcile time in seconds
  reconcileRequeueSeconds: 30
  # -- TTL of the NS and respective glue record used by external DNS
  nsRecordTTL: 30
  coredns:
    # -- Extra CoreDNS server blocks
    extraServerBlocks: ""
    # -- Extra CoreDNS plugins to be enabled
    extra_plugins: []
  log:
    # -- log format (simple,json)
    format: simple # log format (simple,json)
    # -- log level (panic,fatal,error,warn,info,debug,trace)
    level: info # log level (panic,fatal,error,warn,info,debug,trace)
  # -- Metrics server address
  metricsAddress: "0.0.0.0:8080"
  securityContext:
    # -- For more options consult https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#securitycontext-v1-core
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    runAsUser: 1000
  # -- Exposing metrics
  exposeMetrics: false
  # -- enable ServiceMonitor
  serviceMonitor:
    enabled: false
  # -- enable validating admission policies
  validatingAdmissionPolicy:
    enabled: false
  # -- pod annotations
  podAnnotations: {}
  # -- pod labels
  podLabels: {}

externaldns:
  # -- `.spec.template.spec.dnsPolicy` for ExternalDNS deployment
  dnsPolicy: "ClusterFirst"
  # -- extra environment variables
  extraEnv: []
  # -- extra volumes
  extraVolumes: []
  # -- extra volume mounts
  extraVolumeMounts: []
  # -- external-dns image repo:tag
  # It is important to use the image from k8gb external-dns fork to get the full
  # functionality. See links below
  # https://github.com/k8gb-io/external-dns
  # https://github.com/k8gb-io/external-dns/pkgs/container/external-dns
  image: registry.k8s.io/external-dns/external-dns:v0.17.0
  # -- external-dns sync interval
  interval: "20s"
  securityContext:
    # -- For more options consult https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#securitycontext-v1-core
    runAsUser: 1000
    # -- For ExternalDNS to be able to read Kubernetes and AWS token files
    fsGroup: 65534 # For ExternalDNS to be able to read Kubernetes and AWS token files
    runAsNonRoot: true

coredns:
  # -- service: refer to https://www.k8gb.io/docs/service_upgrade.html for upgrading CoreDNS service steps
  isClusterService: false
  deployment:
    # -- Skip CoreDNS creation and uses the one shipped by k8gb instead
    skipConfig: true
  image:
    # -- CoreDNS CRD plugin image
    repository: absaoss/k8s_crd
    # -- image tag
    tag: v0.1.2
  # -- Creates serviceAccount for coredns
  serviceAccount:
    create: true
    name: coredns
  # -- Disables all permissions since we don't open privileged ports
  securityContext:
    capabilities:
      add: []
  # -- Only meant to open the correct service and container ports, has no other impact on the coredns configuration
  servers:
  - port: 5353
    servicePort: 53
    plugins:
    - name: prometheus
      parameters: 0.0.0.0:9153

  # -- If the value is LoadBalancer, the IP addresses of the cluster will be loaded from the CoreDNS service;
  # otherwise, they will be loaded from the first ingress marked with the label "k8gb.io/ip-source=true".
  serviceType: "ClusterIP"

infoblox:
  # -- infoblox provider enabled
  enabled: false
  # -- WAPI address
  gridHost: 10.0.0.1
  # -- WAPI version
  wapiVersion: 2.3.1
  # -- WAPI port
  wapiPort: 443
  # -- use SSL
  sslVerify: true
  # -- Request Timeout in secconds
  httpRequestTimeout: 20
  # -- Size of connections pool
  httpPoolConnections: 10

extdns:
  enabled: false
  interval: 20s
  labelFilter: "k8gb.absa.oss/dnstype=extdns"
  logLevel: debug
  managedRecordTypes:
  - A
  - CNAME
  - NS
  policy: sync
  rbac:
    create: true
  sources:
  - crd
  domainFilters:
  - "example.com"
  txtPrefix: "k8gb-<GEOTAG>-"
  txtOwnerId: "k8gb-<GEOTAG>"

ns1:
  # -- Enable NS1 provider
  enabled: false
  # -- optional custom NS1 API endpoint for on-prem setups
  # endpoint: https://api.nsone.net/v1/
  ignoreSSL: false

rfc2136:
  enabled: false
  rfc2136Opts:
    - host: host.k3d.internal
    - port: 1053
  rfc2136auth:
    insecure:
      enabled: false
    tsig:
      enabled: true
      tsigCreds:
        - tsig-secret-alg: hmac-sha256
        - tsig-keyname: externaldns-key
    gssTsig:
      enabled: false
      kerberosConfigMap: kerberos-config
      gssTsigCreds:
        - kerberos-username: ad-user
        - kerberos-password: ad-user-pass
        - kerberos-realm: ad-domain-realm

azuredns:
  enabled: false
  # -- External-dns secret name which contains Azure credentials.
  # See https://github.com/k8gb-io/external-dns/blob/master/docs/tutorials/azure.md#configuration-file for expected format
  authSecretName: external-dns-secret-azure
  createAuthSecret:
    # -- Create an authentication secret for Azure DNS based on the values below
    # alternatively, you can create the secret manually and pass its name in the `azuredns.authSecretName` value
    enabled: true
    # -- Azure tenant ID which holds the managed identity
    tenantId: myTenantId
    # -- subscription id which holds the Azure DNS zone
    subscriptionId: mySubscriptionId
    # -- Azure Resource Group which holds the Azure DNS Zone (which is defined as 'k8gb.edgeDNSZone')
    resourceGroup: myDnsResourceGroup
    # -- Azure client ID that is associated with the Service Principal.
    aadClientId: myAadClientId
    # -- Azure client secret that is associated with the Service Principal.
    aadClientSecret: myAadClientSecret
    # -- Use either AKS Kubelet Identity or AAD Pod Identities
    useManagedIdentityExtension: false
    # -- Client id from the Managed identitty when using the AAD Pod Identities
    userAssignedIdentityID: myUserAssignedIdentityID
    # -- Use AKS workload identity extension
    useWorkloadIdentityExtension: false

cloudflare:
  # -- Enable Cloudflare provider
  enabled: false
  # -- Cloudflare Zone ID
  # follow https://developers.cloudflare.com/fundamentals/setup/find-account-and-zone-ids/
  # to find your zoneID value
  zoneID: replaceme
  # -- Configure how many DNS records to fetch per request
  # see https://github.com/kubernetes-sigs/external-dns/blob/master/docs/tutorials/cloudflare.md#throttling
  dnsRecordsPerPage: 5000

openshift:
  # -- Install OpenShift specific RBAC
  enabled: false

tracing:
  # -- if the application should be sending the traces to OTLP collector (env var `TRACING_ENABLED`)
  enabled: false

  # -- should the Jaeger be deployed together with the k8gb operator? In case of using another OpenTracing solution,
  # make sure that configmap for OTEL agent has the correct exporters set up (`tracing.otelConfig`).
  deployJaeger: false

  # -- `host:port` where the spans from the applications (traces) should be sent, sets the `OTEL_EXPORTER_OTLP_ENDPOINT` env var
  # This is not the final destination where all the traces are going. Otel collector has its configuration in the associated configmap (`tracing.otelConfig`).
  endpoint: localhost:4318

  # -- float representing the ratio of how often the span should be kept/dropped (env var `TRACING_SAMPLING_RATIO`)
  # if not specified, the AlwaysSample will be used which is the same as 1.0. `0.1` would mean that 10% of samples will be kept
  samplingRatio: null

  # -- configuration for OTEL collector, this will be represented as configmap called `agent-config`
  otelConfig: null

  sidecarImage:
    # -- OpenTelemetry collector into which the k8gb operator sends the spans. It can be further configured to send its data
    # to somewhere else using exporters (Jaeger for instance)
    repository: otel/opentelemetry-collector
    tag: 0.128.0
    pullPolicy: Always

  jaegerImage:
    # -- if `tracing.deployJaeger==true` this image will be used in the deployment for Jaeger
    repository: jaegertracing/all-in-one
    tag: 1.70.0
    pullPolicy: Always

istio:
  # -- install istio RBAC
  enabled: true
